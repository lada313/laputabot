# notifier.py
import asyncio
import logging
import json
import os
import time
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from analysis import get_liquidity_metrics, analyze_stock
from save_json import enqueue_git_push

PARALLEL_LIMIT = int(os.getenv("PARALLEL_LIMIT", "8"))  # –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ ENV
ANALYSIS_LIMIT = int(os.getenv("ANALYSIS_LIMIT", "4"))
_analysis_sem = asyncio.Semaphore(ANALYSIS_LIMIT)
logger = logging.getLogger("notifier")

OPEN_TRADES_FILE = "open_trades.json"
SCAN_CANDIDATES = os.getenv("SCAN_CANDIDATES", "0") == "1"
MAX_NEW_SIGNALS_PER_CYCLE = int(os.getenv("MAX_NEW_SIGNALS_PER_CYCLE", "3"))
CANDIDATES_FILE = "candidates.json"
TP1_PCT = 0.05   # +5%
TP2_PCT = 0.10   # +10%
SL_PCT  = 0.03   # -3%
# --- —Ä–∏—Å–∫/–∫–∞–ø–∏—Ç–∞–ª/—Ç—Ä–µ–π–ª–∏–Ω–≥ ---
CAPITAL   = float(os.getenv("CAPITAL", "10000"))   # –æ–±—â–∏–π –¥–µ–ø–æ–∑–∏—Ç, ‚ÇΩ
RISK_PCT  = float(os.getenv("RISK_PCT", "0.01"))    # —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É, 1% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TRAIL_PCT = float(os.getenv("TRAIL_PCT", "0.03"))   # —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø 3%

async def _bounded_gather(coros, limit: int = PARALLEL_LIMIT):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—ã, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 'limit' –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."""
    sem = asyncio.Semaphore(limit)

    async def wrap(c):
        async with sem:
            try:
                return await c
            except Exception as e:
                return e  # –≤–µ—Ä–Ω—ë–º –æ—à–∏–±–∫—É –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –≤—Å–µ–º —Ü–∏–∫–ª–æ–º

    return await asyncio.gather(*(wrap(c) for c in coros), return_exceptions=False)

def _calc_position_size(entry: float, sl: float, lot_size: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–ö–¶–ò–ô (–Ω–µ –ª–æ—Ç–æ–≤!), —á—Ç–æ–±—ã —Ä–∏—Å–∫ (entry - sl) √ó qty ‚â§ CAPITAL √ó RISK_PCT.
    –û–∫—Ä—É–≥–ª—è–µ—Ç –≤–Ω–∏–∑ –¥–æ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ –ª–æ—Ç—É. –ï—Å–ª–∏ –¥–∞–∂–µ 1 –ª–æ—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∏—Å–∫ ‚Äî –≤–µ—Ä–Ω—ë—Ç 0.
    """
    per_share = max(entry - sl, 0.01)       # –∑–∞—â–∏—Ç–∞ –æ—Ç 0
    risk_bank = CAPITAL * RISK_PCT          # —Å–∫–æ–ª—å–∫–æ ‚ÇΩ –≥–æ—Ç–æ–≤ —Ç–µ—Ä—è—Ç—å –Ω–∞ —Å–¥–µ–ª–∫—É

    raw_shares = int(risk_bank // per_share)
    # –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ –ª–æ—Ç—É
    shares = (raw_shares // lot_size) * lot_size
    if shares < lot_size:
        return 0
    return shares

def _load_open_trades() -> dict:
    try:
        if os.path.exists(OPEN_TRADES_FILE):
            if os.path.getsize(OPEN_TRADES_FILE) == 0:
                # –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—ë–º
                _save_open_trades({})
                return {}
            with open(OPEN_TRADES_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return data if isinstance(data, dict) else {}
        else:
            _save_open_trades({})
        return {}
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {OPEN_TRADES_FILE}: {e}")
        return {}

def _save_open_trades(data: dict) -> None:
    try:
        if not isinstance(data, dict):
            raise ValueError("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö open_trades")
        with open(OPEN_TRADES_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        enqueue_git_push("Update open_trades.json")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {OPEN_TRADES_FILE}: {e}")

async def notify_price_changes(application, TICKERS, portfolio, last_signal, CHAT_ID,
                               get_moex_price_func, calculate_rsi_func,
                               lots_map=None, candidates_file="candidates.json"):
    first_run = True
    last_price_signal = {}
    last_alert_at = {}               # –∞–Ω—Ç–∏—Å–ø–∞–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è ¬´–æ—Ç—Å–ª–µ–∂–∫–∏¬ª
    ALERT_COOLDOWN_SEC = 6 * 3600    # 6 —á–∞—Å–æ–≤

    open_trades = _load_open_trades()    # {ticker: {...}}

    def _load_candidates_dict() -> dict:
        try:
            if os.path.exists(CANDIDATES_FILE):
                with open(CANDIDATES_FILE, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    return data if isinstance(data, dict) else {}
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {CANDIDATES_FILE}: {e}")
        return {}

    def lot_size_for(ticker: str) -> int:
        if lots_map and ticker in lots_map:
            try:
                return int(lots_map[ticker])
            except Exception:
                pass
        try:
            if os.path.exists(candidates_file):
                with open(candidates_file, "r", encoding="utf-8") as f:
                    cands = json.load(f)
                lot = cands.get(ticker, {}).get("lot")
                if lot:
                    return int(lot)
        except Exception as e:
            logger.warning(f"lot_size_for: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {candidates_file}: {e}")
        return 1

    def ensure_trade(ticker: str, name: str, entry_price: float, lot_size: int):
        """
        –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º.
        –°—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫—É 1% –∏ –∑–∞–≤–æ–¥–∏–º –ø–æ–ª—è –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞.
        """
        tr = open_trades.get(ticker)
        if tr and tr.get("status") in ("open", "tp1_hit"):
            return  # —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è

        tp1 = round(entry_price * (1 + TP1_PCT), 6)
        tp2 = round(entry_price * (1 + TP2_PCT), 6)
        sl  = round(entry_price * (1 - SL_PCT), 6)

        qty_shares = _calc_position_size(entry_price, sl, lot_size)  # –∞–≤—Ç–æ-—Ä–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞
        open_trades[ticker] = {
            "name": name,
            "created_at": datetime.utcnow().isoformat(),
            "entry_price": float(entry_price),
            "tp1": tp1,
            "tp2": tp2,
            "sl": sl,
            "lot_size": int(lot_size),
            "qty": int(qty_shares),
            "status": "open",                # open -> tp1_hit -> closed
            # —Ç—Ä–µ–π–ª–∏–Ω–≥
            "trail_active": False,
            "trail_anchor": float(entry_price),
            "trail_sl": float(sl),
            "last_notified": 0.0
        }
        _save_open_trades(open_trades)

    async def check_trade_exits():
        changed = False
        for ticker, tr in list(open_trades.items()):
            if tr.get("status") == "closed":
                continue
            try:
                px = await get_moex_price_func(ticker)
                if px is None:
                    continue

                name      = tr.get("name", ticker)
                status    = tr.get("status", "open")
                lot_size  = int(tr.get("lot_size", 1))
                entry     = float(tr.get("entry_price", 0.0))
                tp1       = float(tr["tp1"]); tp2 = float(tr["tp2"])
                sl        = float(tr["sl"])
                qty       = int(tr.get("qty", 0))

                trail_on  = bool(tr.get("trail_active", False))
                anchor    = float(tr.get("trail_anchor", entry))
                trail_sl  = float(tr.get("trail_sl", sl))

                lot_price = px * lot_size

                # 1) –æ–±—ã—á–Ω—ã–π SL (–≤ —Ç.—á. –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫)
                if px <= sl and status in ("open", "tp1_hit"):
                    msg = (
                        f"üõë *{name}* ({ticker}) ‚Äî –¥–æ—Å—Ç–∏–≥–Ω—É—Ç Stop Loss\n"
                        f"‚Ä¢ –¢–µ–∫—É—â–∞—è: ~{px:.2f} ‚ÇΩ\n"
                        f"‚Ä¢ SL: {sl:.2f} ‚ÇΩ\n"
                        f"‚Ä¢ –û–±—ä—ë–º: {qty} –∞–∫—Ü. (~{qty//max(lot_size,1)} –ª–æ—Ç.)"
                        f"\nüì¶ –õ–æ—Ç: {lot_size} —à—Ç ¬∑ ~{lot_price:.2f} ‚ÇΩ"
                    )
                    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", url=f"https://www.tinkoff.ru/invest/stocks/{ticker}")]])
                    await application.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown", reply_markup=kb)
                    tr["status"] = "closed"
                    changed = True
                    continue

                # 2) TP2 ‚Äî –≤—ã—Ö–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                if px >= tp2 and status in ("open", "tp1_hit"):
                    msg = (
                        f"üéâ *{name}* ({ticker}) ‚Äî –¥–æ—Å—Ç–∏–≥–Ω—É—Ç TP2, –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
                        f"‚Ä¢ –¢–µ–∫—É—â–∞—è: ~{px:.2f} ‚ÇΩ\n"
                        f"‚Ä¢ TP2: {tp2:.2f} ‚ÇΩ\n"
                        f"‚Ä¢ –û–±—ä—ë–º: {qty} –∞–∫—Ü. (~{qty//max(lot_size,1)} –ª–æ—Ç.)"
                        f"\nüì¶ –õ–æ—Ç: {lot_size} —à—Ç ¬∑ ~{lot_price:.2f} ‚ÇΩ"
                    )
                    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", url=f"https://www.tinkoff.ru/invest/stocks/{ticker}")]])
                    await application.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown", reply_markup=kb)
                    tr["status"] = "closed"
                    changed = True
                    continue

                # 3) TP1 ‚Äî –±–µ–∑—É–±—ã—Ç–æ–∫ + –≤–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥
                if px >= tp1 and status == "open":
                    tr["sl"] = round(entry, 6)                    # SL -> —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
                    tr["trail_active"] = True
                    tr["trail_anchor"] = float(px)
                    tr["trail_sl"] = round(px * (1 - TRAIL_PCT), 6)

                    msg = (
                        f"‚úÖ *{name}* ({ticker}) ‚Äî –¥–æ—Å—Ç–∏–≥–Ω—É—Ç TP1\n"
                        f"‚Ä¢ –ë–µ–∑—É–±—ã—Ç–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: SL ‚Üí {tr['sl']:.2f} ‚ÇΩ\n"
                        f"‚Ä¢ –í–∫–ª—é—á—ë–Ω —Ç—Ä–µ–π–ª–∏–Ω–≥ {int(TRAIL_PCT*100)}%: —Ç–µ–∫—É—â–∏–π trail SL {tr['trail_sl']:.2f} ‚ÇΩ\n"
                        f"‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å TP2: {tp2:.2f} ‚ÇΩ"
                        f"\n\n–û–±—ä—ë–º: {qty} –∞–∫—Ü. (~{qty//max(lot_size,1)} –ª–æ—Ç.)"
                    )
                    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", url=f"https://www.tinkoff.ru/invest/stocks/{ticker}")]])
                    await application.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown", reply_markup=kb)

                    tr["status"] = "tp1_hit"
                    changed = True

                # 4) –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
                if tr.get("trail_active") and tr.get("status") in ("open", "tp1_hit"):
                    if px > tr["trail_anchor"]:
                        tr["trail_anchor"] = float(px)
                        tr["trail_sl"] = round(px * (1 - TRAIL_PCT), 6)
                        changed = True
                    if px <= tr["trail_sl"]:
                        msg = (
                            f"üìâ *{name}* ({ticker}) ‚Äî —Å—Ä–∞–±–æ—Ç–∞–ª —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø\n"
                            f"‚Ä¢ –¢–µ–∫—É—â–∞—è: ~{px:.2f} ‚ÇΩ\n"
                            f"‚Ä¢ Trail SL: {tr['trail_sl']:.2f} ‚ÇΩ (—è–∫–æ—Ä—å ~{tr['trail_anchor']:.2f} ‚ÇΩ)\n"
                            f"‚Ä¢ –û–±—ä—ë–º: {qty} –∞–∫—Ü. (~{qty//max(lot_size,1)} –ª–æ—Ç.)"
                        )
                        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", url=f"https://www.tinkoff.ru/invest/stocks/{ticker}")]])
                        await application.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown", reply_markup=kb)
                        tr["status"] = "closed"
                        changed = True

            except Exception as e:
                logger.error(f"check_trade_exits {ticker}: {e}")

        if changed:
            _save_open_trades(open_trades)


    async def _fetch_one(ticker: str, name: str, in_portfolio: bool):
        """
        –ë—ã—Å—Ç—Ä–æ —Å–æ–±—Ä–∞—Ç—å –≤—Å—ë –Ω—É–∂–Ω–æ–µ –ø–æ –æ–¥–Ω–æ–º—É —Ç–∏–∫–µ—Ä—É (—Ü–µ–Ω–∞, –ª–æ—Ç, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, –∞–Ω–∞–ª–∏–∑).
        –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ –Ω–µ –ø–∏—à–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ —Å—á–∏—Ç–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
        """
        result = {
            "ticker": ticker,
            "name": name,
            "price": None,
            "lot_size": 1,
            "avg_turn": None,
            "avg_vol": None,
            "signal_text": None,
            "in_portfolio": in_portfolio,
            "error": None,
        }
        try:
            # —Ü–µ–Ω–∞ –∏ –ª–æ—Ç
            price = await get_moex_price_func(ticker)
            if price is None:
                raise ValueError("–ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã")
            result["price"] = price
            result["lot_size"] = lot_size_for(ticker)
    
            # –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ –Ω—É–∂–Ω–∞)
            if not in_portfolio:
                try:
                    _, avg_vol, avg_turn = await get_liquidity_metrics(ticker, days=20)
                    result["avg_vol"] = avg_vol
                    result["avg_turn"] = avg_turn
                except Exception:
                    result["avg_vol"] = 0.0
                    result["avg_turn"] = 0.0
    
            # –∞–Ω–∞–ª–∏–∑ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–µ–º–∞—Ñ–æ—Ä–æ–º, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã API
            async with _analysis_sem:
                result["signal_text"] = await analyze_stock(ticker)
    
        except Exception as e:
            result["error"] = str(e)
    
        return result
            
                while True:
                    # 1) –ö–û–ì–û –°–ö–ê–ù–ò–†–£–ï–ú: watchlist + (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
                    scan_items = list(TICKERS.items())
                    if SCAN_CANDIDATES:
                        cands = _load_candidates_dict()
                        for t, info in cands.items():
                            if t in portfolio or t in TICKERS:
                                continue
                            nm = (info.get("name") or t)
                            scan_items.append((t, nm))
            
                    # 2) –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –°–ë–û–† –î–ê–ù–ù–´–• (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
                    tasks = []
                    for ticker, name in scan_items:
                        tasks.append(_fetch_one(ticker, name, in_portfolio=(ticker in portfolio)))
            
                    results = await _bounded_gather(tasks)  # —Å–æ–±–∏—Ä–∞–µ–º –ø–∞—á–∫–∞–º–∏ –ø–æ PARALLEL_LIMIT
            
                    # 2.1) –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (–æ—Ç–ø—Ä–∞–≤–∫–∏/–∑–∞–ø–∏—Å—å/–ª–∏–º–∏—Ç—ã)
                    new_signals_sent = 0
                    for res in results:
                        if isinstance(res, Exception):
                            logger.error(f"–û—à–∏–±–∫–∞ —Ç–∞—Å–∫–∞: {res}")
                            continue
                        if res.get("error"):
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ {res['ticker']}: {res['error']}")
                            continue
            
                        ticker   = res["ticker"]
                        name     = res["name"]
                        price    = res["price"]
                        lot_size = res["lot_size"]
                        lot_price = price * lot_size
                        sig      = res["signal_text"]
                        in_pf    = res["in_portfolio"]

            try:
                if in_pf:
                    purchase_price = portfolio[ticker]["price"]
                    change = (price - purchase_price) / purchase_price * 100

                    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
                    if not first_run and sig != last_signal.get(ticker):
                        old = last_signal.get(ticker)
                        if old:
                            msg = (
                                f"üîÑ *{name}* ({ticker}) ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞\n\n"
                                f"–ë—ã–ª–æ: {old}\n"
                                f"–°—Ç–∞–ª–æ: {sig}\n"
                                f"\nüì¶ –õ–æ—Ç: {lot_size} —à—Ç ¬∑ ~{lot_price:.2f} ‚ÇΩ"
                            )
                        else:
                            msg = (
                                f"üìå *{name}* ({ticker}) ‚Äî –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:\n\n"
                                f"{sig}\n"
                                f"\nüì¶ –õ–æ—Ç: {lot_size} —à—Ç ¬∑ ~{lot_price:.2f} ‚ÇΩ"
                            )
                        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", url=f"https://www.tinkoff.ru/invest/stocks/{ticker}")]])
                        await application.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown", reply_markup=kb)
                        last_signal[ticker] = sig

                    # –∞–ª–µ—Ä—Ç—ã –ø–æ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫—É
                    if change >= 10 and last_price_signal.get(ticker) != "take":
                        msg = (
                            f"üí∞ *{name}* ({ticker}) –≤—ã—Ä–æ—Å –Ω–∞ {change:.2f}% –æ—Ç —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏!\n"
                            f"üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å (Take Profit)\n"
                            f"\nüì¶ –õ–æ—Ç: {lot_size} —à—Ç ¬∑ ~{lot_price:.2f} ‚ÇΩ"
                        )
                        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", url=f"https://www.tinkoff.ru/invest/stocks/{ticker}")]])
                        await application.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown", reply_markup=kb)
                        last_price_signal[ticker] = "take"
                    elif change <= -5 and last_price_signal.get(ticker) != "stop":
                        msg = (
                            f"‚ö†Ô∏è *{name}* ({ticker}) —É–ø–∞–ª –Ω–∞ {change:.2f}% –æ—Ç —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏!\n"
                            f"üîª –ü–æ–¥—É–º–∞–π –æ –∑–∞—â–∏—Ç–µ –∫–∞–ø–∏—Ç–∞–ª–∞ (Stop Loss)\n"
                            f"\nüì¶ –õ–æ—Ç: {lot_size} —à—Ç ¬∑ ~{lot_price:.2f} ‚ÇΩ"
                        )
                        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", url=f"https://www.tinkoff.ru/invest/stocks/{ticker}")]])
                        await application.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown", reply_markup=kb)
                        last_price_signal[ticker] = "stop"
                    elif -5 < change < 10:
                        last_price_signal[ticker] = None

                else:
                    # —Ñ–∏–ª—å—Ç—Ä –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                    avg_turn = res["avg_turn"] or 0.0
                    avg_vol  = res["avg_vol"]  or 0.0
                    if avg_turn < 5_000_000 or avg_vol < 10_000:
                        continue

                    if not sig or "–ü–æ–∫—É–ø–∞—Ç—å" not in sig:
                        continue

                    now_ts = time.time()
                    if now_ts - last_alert_at.get(ticker, 0) < ALERT_COOLDOWN_SEC:
                        continue
                    if SCAN_CANDIDATES and new_signals_sent >= MAX_NEW_SIGNALS_PER_CYCLE:
                        continue

                    ensure_trade(ticker, name, price, lot_size)
                    tr = open_trades.get(ticker, {})
                    lots_cnt = (tr.get("qty", 0) // max(lot_size, 1)) if tr.get("qty") else 0

                    msg = (
                        f"‚úÖ *{name}* ({ticker}) ‚Äî —Å–∏–≥–Ω–∞–ª: –ü–æ–∫—É–ø–∞—Ç—å\n\n"
                        f"{sig}\n"
                        f"\nüéØ –¶–µ–ª–∏:\n"
                        f"‚Ä¢ TP1: ~{tr['tp1']:.2f} ‚ÇΩ (+{int(TP1_PCT*100)}%)\n"
                        f"‚Ä¢ TP2: ~{tr['tp2']:.2f} ‚ÇΩ (+{int(TP2_PCT*100)}%)\n"
                        f"‚Ä¢ SL:  ~{tr['sl']:.2f} ‚ÇΩ (‚àí{int(SL_PCT*100)}%)\n"
                        f"\nüì¶ –õ–æ—Ç: {lot_size} —à—Ç ¬∑ ~{(price*lot_size):.2f} ‚ÇΩ"
                        f"\nüìê –†–∏—Å–∫ {int(RISK_PCT*100)}% ‚Üí –æ–±—ä—ë–º: {tr.get('qty',0)} –∞–∫—Ü. (~{lots_cnt} –ª–æ—Ç.)"
                        f"\nüíß –°—Ä. –æ–±–æ—Ä–æ—Ç (20–¥): ~{avg_turn:,.0f} ‚ÇΩ / –¥–µ–Ω—å"
                    )
                    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", url=f"https://www.tinkoff.ru/invest/stocks/{ticker}")]])
                    await application.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown", reply_markup=kb)

                    if SCAN_CANDIDATES:
                        new_signals_sent += 1
                    last_signal[ticker] = sig
                    last_alert_at[ticker] = now_ts

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ {ticker}: {e}")

        # 3) –ü–†–û–í–ï–†–Ø–ï–ú –í–´–•–û–î–´ –ü–û –û–¢–ö–†–´–¢–´–ú –°–î–ï–õ–ö–ê–ú
        await check_trade_exits()

        first_run = False
        await asyncio.sleep(10 * 60)

