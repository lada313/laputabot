import os
import asyncio
from datetime import datetime, timedelta
import numpy as np
from typing import List, Optional
from tinkoff.invest import AsyncClient, CandleInterval

TINKOFF_TOKEN = os.getenv("TINKOFF_TOKEN")

# --- –ö—ç—à FIGI, —á—Ç–æ–±—ã –Ω–µ –≥–æ–Ω—è—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞–∂–¥—ã–π —Ä–∞–∑
_figi_cache: dict[str, str] = {}

async def get_figi_by_ticker(ticker: str) -> Optional[str]:
    t = (ticker or "").upper()
    if not t:
        return None
    if t in _figi_cache:
        return _figi_cache[t]
    async with AsyncClient(TINKOFF_TOKEN) as client:
        shares = await client.instruments.shares()
        for share in shares.instruments:
            if (getattr(share, "ticker", "") or "").upper() == t:
                _figi_cache[t] = share.figi
                return share.figi
    return None


def calculate_rsi(prices: List[float], period: int = 14) -> Optional[float]:
    if len(prices) < period + 1:
        return None
    deltas = np.diff(prices)
    gains = np.where(deltas > 0, deltas, 0.0)
    losses = np.where(deltas < 0, -deltas, 0.0)

    avg_gain = np.mean(gains[:period])
    avg_loss = np.mean(losses[:period])

    for i in range(period, len(deltas)):
        avg_gain = (avg_gain * (period - 1) + gains[i]) / period
        avg_loss = (avg_loss * (period - 1) + losses[i]) / period

    if avg_loss == 0:
        return 100.0
    rs = avg_gain / avg_loss
    return float(100 - (100 / (1 + rs)))


def calculate_sma(prices: List[float], period: int) -> Optional[float]:
    if len(prices) < period:
        return None
    return float(np.mean(prices[-period:]))


def calculate_ema(prices: List[float], period: int) -> List[Optional[float]]:
    ema: List[Optional[float]] = []
    k = 2 / (period + 1)
    for i in range(len(prices)):
        if i < period - 1:
            ema.append(None)
        elif i == period - 1:
            sma = float(np.mean(prices[:period]))
            ema.append(sma)
        else:
            prev = ema[-1]
            assert prev is not None
            ema.append(prices[i] * k + prev * (1 - k))
    return ema


def analyze_stock_from_prices(ticker: str, prices: List[float]) -> str:
    """
    –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ø–∏—Å–∫—É close-—Ü–µ–Ω (–±–µ–∑ Tinkoff API).
    –ú—è–≥–∫–∏–µ –æ–∫–Ω–∞: –∫–æ—Ä–æ—Ç–∫–∞—è SMA –¥–æ 50, –¥–ª–∏–Ω–Ω–∞—è 60/120/200 –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.
    """
    n = len(prices)
    if n < 60:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"  # –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –º–∏–Ω–∏–º—É–º

    short_win = min(50, n)
    if n >= 200:
        long_win = 200
    elif n >= 120:
        long_win = 120
    else:
        long_win = 60

    sma_short = float(np.mean(prices[-short_win:]))
    sma_long = float(np.mean(prices[-long_win:]))

    rsi = calculate_rsi(prices)

    signals = []
    if rsi is not None:
        if rsi < 30:
            signals.append("üíé RSI < 30 ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
        elif rsi > 70:
            signals.append("‚ö†Ô∏è RSI > 70 ‚Äî –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")

    if sma_short > sma_long:
        signals.append("üìà SMA-–∫–æ—Ä–æ—Ç–∫–∞—è –≤—ã—à–µ SMA-–¥–ª–∏–Ω–Ω–æ–π ‚Äî –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
    else:
        signals.append("üìâ SMA-–∫–æ—Ä–æ—Ç–∫–∞—è –Ω–∏–∂–µ SMA-–¥–ª–∏–Ω–Ω–æ–π ‚Äî –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")

    if (rsi is not None and rsi < 35) and sma_short > sma_long:
        final = "‚úÖ –ü–æ–∫—É–ø–∞—Ç—å"
    elif (rsi is not None and rsi > 70) and sma_short < sma_long:
        final = "üîª –ü—Ä–æ–¥–∞–≤–∞—Ç—å"
    else:
        final = "ü§î –ü–æ–¥–æ–∂–¥–∞—Ç—å"

    return f"{final}\n" + "\n".join(signals)


async def analyze_stock(ticker: str, detailed: bool = False) -> str:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–≤–µ—á–∞–º Tinkoff (–¥–Ω–µ–≤–∫–∏), —Å –≤–µ—Å–æ–≤–æ–π –º–æ–¥–µ–ª—å—é.
    """
    figi = await get_figi_by_ticker(ticker)
    if not figi:
        return f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω FIGI –¥–ª—è {ticker}"

    async with AsyncClient(TINKOFF_TOKEN) as client:
        now_utc = datetime.utcnow()
        from_utc = now_utc - timedelta(days=300)

        candles = await client.market_data.get_candles(
            figi=figi,
            from_=from_utc,
            to=now_utc,
            interval=CandleInterval.CANDLE_INTERVAL_DAY
        )

    if not candles.candles:
        return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {ticker}"

    close_prices = [c.close.units + c.close.nano * 1e-9 for c in candles.candles]
    volumes = [c.volume for c in candles.candles]

    if len(close_prices) < 50:
        return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ {ticker}"

    weights = {
        "rsi": 2.0,
        "trend": 1.0,
        "volume": 0.5,
        "sma": 1.5,
        "macd": 1.0
    }

    # --- RSI
    rsi_score = 0
    rsi_text = "–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω"
    rsi = calculate_rsi(close_prices)
    if rsi is not None:
        if rsi < 30:
            rsi_score = 1
            rsi_text = f"{rsi:.1f} ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω ‚úÖ"
        elif rsi > 70:
            rsi_score = -1
            rsi_text = f"{rsi:.1f} ‚Äî –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω ‚ùå"
        else:
            rsi_text = f"{rsi:.1f} ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ ‚ûñ"

    # --- –¢—Ä–µ–Ω–¥ (5 –¥–Ω–µ–π)
    trend_score = 0
    if close_prices[-1] > close_prices[-5]:
        trend_score = 1
        trend_text = "—Ä–æ—Å—Ç ‚úÖ"
    elif close_prices[-1] < close_prices[-5]:
        trend_score = -1
        trend_text = "–ø–∞–¥–µ–Ω–∏–µ ‚ùå"
    else:
        trend_text = "–±–æ–∫–æ–≤–æ–π ‚ûñ"

    # --- –û–±—ä—ë–º
    avg_volume = sum(volumes[:-1]) / max(1, (len(volumes) - 1))
    current_volume = volumes[-1]
    volume_score = 0
    if current_volume > avg_volume * 1.5:
        volume_score = 1
        volume_text = "–≤—ã—Å–æ–∫–∏–π ‚úÖ"
    elif current_volume < avg_volume * 0.5:
        volume_score = -1
        volume_text = "–Ω–∏–∑–∫–∏–π ‚ùå"
    else:
        volume_text = "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π ‚ûñ"

    # --- SMA 50/200 (—Å —è–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π None)
    sma_score = 0
    sma_text = "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
    sma50 = calculate_sma(close_prices, 50)
    sma200 = calculate_sma(close_prices, 200)
    if sma50 is not None and sma200 is not None:
        if sma50 > sma200:
            sma_score = 1
            sma_text = "–∑–æ–ª–æ—Ç–æ–π –∫—Ä–µ—Å—Ç ‚úÖ"
        else:
            sma_score = -1
            sma_text = "–º—ë—Ä—Ç–≤—ã–π –∫—Ä–µ—Å—Ç ‚ùå"

    # --- MACD (–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ None-safe)
    macd_score = 0
    macd_text = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    ema12 = calculate_ema(close_prices, 12)
    ema26 = calculate_ema(close_prices, 26)

    macd_line: List[Optional[float]] = [
        (e1 - e2) if (e1 is not None and e2 is not None) else None
        for e1, e2 in zip(ema12, ema26)
    ]
    macd_valid = [m for m in macd_line if m is not None]
    if len(macd_valid) >= 9:
        macd_signal_valid = calculate_ema(macd_valid, 9)
        pad = len(macd_line) - len(macd_signal_valid)
        macd_signal: List[Optional[float]] = [None] * pad + macd_signal_valid
        if macd_line[-1] is not None and macd_signal[-1] is not None:
            if macd_line[-1] > macd_signal[-1]:
                macd_score = 1
                macd_text = "–∏–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö ‚úÖ"
            else:
                macd_score = -1
                macd_text = "–∏–º–ø—É–ª—å—Å –≤–Ω–∏–∑ ‚ùå"
    else:
        macd_text = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    # --- –í–µ—Å–æ–≤–æ–π –∏—Ç–æ–≥
    weighted_score = (
        rsi_score * weights["rsi"] +
        trend_score * weights["trend"] +
        volume_score * weights["volume"] +
        sma_score * weights["sma"] +
        macd_score * weights["macd"]
    )

    if weighted_score >= 2.5:
        conclusion = "üí° –í—ã–≤–æ–¥: ‚úÖ –ü–æ–∫—É–ø–∞—Ç—å"
    elif weighted_score <= -2.5:
        conclusion = "üí° –í—ã–≤–æ–¥: üîª –ü—Ä–æ–¥–∞–≤–∞—Ç—å"
    else:
        conclusion = "üí° –í—ã–≤–æ–¥: ‚è∏ –ü–æ–¥–æ–∂–¥–∞—Ç—å"

    # --- SL/TP
    stop_loss_price = close_prices[-1] * 0.95
    take_profit_price = close_prices[-1] * 1.10
    stop_loss_text = f"üîª *–°—Ç–æ–ø-–ª–æ—Å—Å:* ~{stop_loss_price:.2f} ‚ÇΩ (‚àí5%)"
    take_profit_text = f"üí∞ *–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:* ~{take_profit_price:.2f} ‚ÇΩ (+10%)"

    if detailed:
        return (
            f"üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {ticker}:\n\n"
            f"‚Ä¢ RSI: {rsi_text}\n"
            f"‚Ä¢ –¢—Ä–µ–Ω–¥: {trend_text}\n"
            f"‚Ä¢ –û–±—ä—ë–º: {volume_text}\n"
            f"‚Ä¢ SMA-50/200: {sma_text}\n"
            f"‚Ä¢ MACD: {macd_text}\n"
            f"\nüéØ –í–µ—Å–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {weighted_score:.1f}\n"
            f"{conclusion}\n\n"
            f"{stop_loss_text}\n"
            f"{take_profit_text}"
        )
    else:
        return f"{conclusion}\n"


# –ü—Ä–∏–º–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
async def _main():
    print(await analyze_stock("SBER", detailed=True))

# === Order plan builder for portfolio ===
from dataclasses import dataclass
from math import floor

@dataclass
class PlanLeg:
    kind: str           # "take_profit" | "stop_market" | "stop_limit"
    what: str           # –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—á–∞—Ç–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É
    activation: float   # —Ü–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    limit: float | None # –¥–ª—è stop_limit
    lots: int           # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
    note: str | None = None  # —Ä–µ–º–∞—Ä–∫–∞

def _lots_from_shares(qty_shares: int, lot_size: int) -> int:
    return max(1, qty_shares // max(1, lot_size))

def build_portfolio_order_plan(
    *,
    ticker: str,
    current_price: float,
    entry_price: float,
    qty_shares: int,
    lot_size: int,
    tp1_pct: float = 0.05,    # +5%
    tp2_pct: float = 0.10,    # +10%
    sl_pct: float  = 0.03,    # -3%
) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –≥–æ—Ç–æ–≤—ã–º–∏ ¬´–Ω–æ–≥–∞–º–∏¬ª –ø–ª–∞–Ω–∞:
      - –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ TP: –ª–∏–±–æ –æ–¥–∏–Ω –æ–±—â–∏–π TP2, –ª–∏–±–æ 50/50 TP1+TP2 (–µ—Å–ª–∏ –ª–æ—Ç–æ–≤ >= 2)
      - —Å—Ç–æ–ø –ø–æ –≤—ã–±–æ—Ä—É: stop-market –∏–ª–∏ stop-limit (activation = SL, limit —á—É—Ç—å –Ω–∏–∂–µ)
    –í—Å–µ —Ü–µ–Ω—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –æ—Ç –¶–ï–ù–´ –í–•–û–î–ê (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç).
    """
    lots_total = _lots_from_shares(qty_shares, lot_size)

    tp1 = round(entry_price * (1 + tp1_pct), 2)
    tp2 = round(entry_price * (1 + tp2_pct), 2)
    sl  = round(entry_price * (1 - sl_pct),  2)

    legs: list[PlanLeg] = []

    # –í–∞—Ä–∏–∞–Ω—Ç A: –æ–¥–∏–Ω –æ–±—â–∏–π —Ç–µ–π–∫ (–≤—Å—ë –ø–æ TP2)
    legs.append(PlanLeg(
        kind="take_profit",
        what="–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (–≤–µ—Å—å –æ–±—ä—ë–º)",
        activation=tp2,
        limit=None,
        lots=lots_total,
        note="–ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –æ–¥–Ω–∏–º —Ç–µ–π–∫–æ–º."
    ))

    # –í–∞—Ä–∏–∞–Ω—Ç B: —á–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è 50/50, –µ—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç –ª–æ—Ç–æ–≤
    if lots_total >= 2:
        half = lots_total // 2
        rest = lots_total - half
        legs.append(PlanLeg(
            kind="take_profit",
            what=f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç #1 (‚âà50% –æ–±—ä—ë–º–∞)",
            activation=tp1,
            limit=None,
            lots=half,
            note="–ß–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –Ω–∞ TP1."
        ))
        legs.append(PlanLeg(
            kind="take_profit",
            what=f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç #2 (–æ—Å—Ç–∞—Ç–æ–∫)",
            activation=tp2,
            limit=None,
            lots=rest,
            note="–î–æ—Å—Ä–æ—á–Ω–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ –ø–æ—Å–ª–µ TP1."
        ))

    # –°—Ç–æ–ø—ã: –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
    # Stop-market ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø–æ —Ä—ã–Ω–∫—É
    legs.append(PlanLeg(
        kind="stop_market",
        what="–°—Ç–æ–ø-–º–∞—Ä–∫–µ—Ç (–≤–µ—Å—å –æ–±—ä—ë–º)",
        activation=sl,
        limit=None,
        lots=lots_total,
        note="–ü—Ä–æ—â–µ –≤—Å–µ–≥–æ: —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ä—ã–Ω–∫—É –ø—Ä–∏ –∫–∞—Å–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
    ))

    # Stop-limit ‚Äî –∞–∫—Ç–∏–≤–∞—Ü–∏—è SL, –ª–∏–º–∏—Ç –Ω–∞ 0.2% –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —à–∞–Ω—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    sl_limit = round(sl * 0.998, 2)
    legs.append(PlanLeg(
        kind="stop_limit",
        what="–°—Ç–æ–ø-–ª–∏–º–∏—Ç (–≤–µ—Å—å –æ–±—ä—ë–º)",
        activation=sl,
        limit=sl_limit,
        lots=lots_total,
        note="–ë–æ–ª–µ–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞: –ª–∏–º–∏—Ç —á—É—Ç—å –Ω–∏–∂–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (~0.2%)."
    ))

    return {
        "ticker": ticker,
        "entry": round(entry_price, 2),
        "current": round(current_price, 2),
        "lot_size": lot_size,
        "qty_shares": qty_shares,
        "tp1": tp1,
        "tp2": tp2,
        "sl": sl,
        "legs": legs,
        # –ö—Ä–∞—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞—è–≤–æ–∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        "help": (
            "TP ‚Äî –æ–±—ã—á–Ω–∞—è –∑–∞—è–≤–∫–∞ Take-Profit –ø–æ —Ü–µ–Ω–µ.\n"
            "Stop-market ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n"
            "Stop-limit ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –ª–∏–º–∏—Ç-—Ü–µ–Ω—É.\n"
            "–õ–∏–º–∏—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–∞ –æ—Ç–∫–∞—Ç–µ ‚Äî –º–æ–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –≤—Ä—É—á–Ω—É—é (–∂–∏–≤–µ—Ç ~13—á)."
        ),
    }

# --- Liquidity helpers ---
async def get_liquidity_metrics(ticker: str, days: int = 20) -> tuple[float, float, float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (avg_close, avg_volume, avg_turnover_rub) –∑–∞ N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π
    –ø–æ –¥–Ω–µ–≤–Ω—ã–º —Å–≤–µ—á–∞–º Tinkoff.
    """
    figi = await get_figi_by_ticker(ticker)
    if not figi:
        return (0.0, 0.0, 0.0)

    async with AsyncClient(TINKOFF_TOKEN) as client:
        now_utc = datetime.utcnow()
        from_utc = now_utc - timedelta(days=days + 10)
        candles = await client.market_data.get_candles(
            figi=figi,
            from_=from_utc,
            to=now_utc,
            interval=CandleInterval.CANDLE_INTERVAL_DAY
        )

    if not candles.candles:
        return (0.0, 0.0, 0.0)

    closes = [c.close.units + c.close.nano * 1e-9 for c in candles.candles][-days:]
    vols   = [c.volume for c in candles.candles][-days:]
    if not closes or not vols:
        return (0.0, 0.0, 0.0)

    avg_close = float(np.mean(closes))
    avg_vol   = float(np.mean(vols))
    avg_turn  = avg_close * avg_vol
    return (avg_close, avg_vol, avg_turn)

if __name__ == "__main__":
    asyncio.run(_main())
