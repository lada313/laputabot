import os, json
import asyncio
import aiohttp
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram import Chat
from tinkoff.invest import CandleInterval
from datetime import datetime, timedelta
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, ConversationHandler, MessageHandler, filters
)
from telegram.error import BadRequest
from telegram.error import NetworkError
from telegram.request import HTTPXRequest
import numpy as np
from typing import List, Optional
from keep_alive import keep_alive
from tinkoff.invest import AsyncClient
from self_ping import self_ping
from notifier import notify_price_changes
from save_json import start_git_worker, enqueue_git_push
from analysis import analyze_stock, build_portfolio_order_plan  # NEW

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TINKOFF_TOKEN = os.getenv("TINKOFF_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID", "0"))

# ---- –û–±—â–∏–π –∫–ª–∏–µ–Ω—Ç Tinkoff –∏ —Å–µ–º–∞—Ñ–æ—Ä –Ω–∞ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å ----
TCS_CLIENT = None        # –±—É–¥–µ—Ç AsyncClient(...)
TCS_SEM = None           # –±—É–¥–µ—Ç asyncio.Semaphore(...)

TICKERS = {}
portfolio = {}
history = []
price_history = {}
last_signal = {}

LOTS = {}
LOTS_CACHE: dict[str, int] = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BUY_PRICE, BUY_PRICE_TYPE, BUY_AMOUNT = range(3)
MAX_HISTORY_DAYS = 30
TICKERS_FILE = "tickers.json"
CANDIDATES_FILE = "candidates.json"
OPEN_TRADES_FILE = "open_trades.json"

async def safe_answer(query):
    try:
        await query.answer()
    except BadRequest as e:
        msg = str(e).lower()
        if "query is too old" in msg or "query id is invalid" in msg:
            logger.warning(f"Ignoring stale callback: {e}")
            return
        raise

async def run_forever(app):
    backoff = 2
    while True:
        try:
            await app.run_polling(
                poll_interval=1.0,
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True,
                stop_signals=None,
                close_loop=False,          # ‚Üê –≤–æ—Ç —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ
            )
        except NetworkError as e:
            logger.warning(f"NetworkError: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {backoff}s")
            await asyncio.sleep(backoff)
            backoff = min(backoff * 2, 60)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ run_polling: {e}", exc_info=True)
            await asyncio.sleep(5)

# ====== AUTO-REFRESH CANDIDATES (TINKOFF first, MOEX fallback) ======
async def update_candidates_list_tinkoff() -> int:
    """
    –¢—è–Ω–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ Tinkoff Invest API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç candidates.json.
    –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ MOEX (class_code TQBR/TQTF/TQTD), –≤–∞–ª—é—Ç–∞ RUB,
    –¥–æ—Å—Ç—É–ø–Ω–æ –∫ –ø–æ–∫—É–ø–∫–µ, –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ API, –ù–ï –¥–ª—è –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.
    –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: { "SBER": {"name": "–°–±–µ—Ä–±–∞–Ω–∫", "lot": 10}, ... }
    """
    try:
        client = TCS_CLIENT
        async with TCS_SEM:
            shares = await client.instruments.shares()
    except Exception as e:
        logger.error(f"‚ùå Tinkoff API: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ü–∏–∏: {e}")
        return 0

    candidates = {}
    allowed_classes = {"TQBR", "TQTF", "TQTD"}

    for s in shares.instruments:
        try:
            ticker = (getattr(s, "ticker", None) or "").strip()
            if not ticker:
                continue

            class_code = (getattr(s, "class_code", None) or "").strip()
            if class_code not in allowed_classes:
                continue

            lot = int(getattr(s, "lot", 1) or 1)

            cur = getattr(s, "currency", None)
            cur = str(cur).lower() if cur is not None else "rub"
            if "rub" not in cur:
                continue

            buy_ok = bool(getattr(s, "buy_available_flag", True))
            api_ok = bool(getattr(s, "api_trade_available_flag", True))
            qual_only = bool(getattr(s, "for_qual_investor_flag", False))
            if not (buy_ok and api_ok):
                continue
            if qual_only:
                continue

            name = (getattr(s, "name", None) or getattr(s, "ticker", "")).strip()
            if not name:
                name = ticker

            if len(ticker) > 8:
                continue

            candidates[ticker] = {"name": name, "lot": lot}
        except Exception:
            continue

    try:
        with open(CANDIDATES_FILE, "w", encoding="utf-8") as f:
            json.dump(candidates, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ Tinkoff: –æ–±–Ω–æ–≤–ª—ë–Ω candidates.json ‚Äî {len(candidates)} —Ç–∏–∫–µ—Ä–æ–≤")
        return len(candidates)
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {CANDIDATES_FILE}: {e}")
        return 0


async def update_candidates_list_moex() -> int:
    """
    –†–ï–ó–ï–†–í: —Ç—è–Ω–µ–º TQBR —á–µ—Ä–µ–∑ MOEX ISS, –µ—Å–ª–∏ Tinkoff –Ω–µ –¥–∞–ª —Å–ø–∏—Å–æ–∫.
    –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ñ–ª–∞–≥–∞–º –∏–∑ Tinkoff (–Ω–µ –¥–ª—è –∫–≤–∞–ª–æ–≤, –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å, –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ API).
    """
    url = ("https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/"
           "securities.json?iss.meta=off&iss.only=securities")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=20) as resp:
                data = await resp.json()
    except Exception as e:
        logger.error(f"‚ùå MOEX: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TQBR: {e}")
        return 0

    table = data.get("securities", {})
    cols = table.get("columns", [])
    rows = table.get("data", []) or []

    def col_index(name):
        try:
            return cols.index(name)
        except Exception:
            return None

    i_secid = col_index("SECID")
    i_short = col_index("SHORTNAME")
    i_lot = col_index("LOTSIZE")

    if i_secid is None:
        logger.error("‚ùå MOEX: –Ω–µ—Ç SECID –≤ –æ—Ç–≤–µ—Ç–µ")
        return 0

    # 1) –ß–µ—Ä–Ω–æ–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏–∑ MOEX
    moex_raw = {}
    for r in rows:
        try:
            secid = (r[i_secid] or "").strip()
            if not secid:
                continue
            short = (r[i_short] if i_short is not None else None) or secid
            lot = r[i_lot] if i_lot is not None else 1
            try:
                lot = int(lot) if lot is not None else 1
            except Exception:
                lot = 1
            if len(secid) > 8:
                continue
            moex_raw[secid] = {"name": str(short).strip(), "lot": lot}
        except Exception:
            continue

    if not moex_raw:
        logger.warning("‚ö†Ô∏è MOEX: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ TQBR")
        return 0

    # 2) –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è MOEX-—Å–ø–∏—Å–∫–∞ –ø–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É Tinkoff (–Ω–µ –∫–≤–∞–ª, –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å, –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ API, —Ä—É–±–ª–∏, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å)
    try:
        client = TCS_CLIENT
        async with TCS_SEM:
            shares = await client.instruments.shares()
    except Exception as e:
        logger.error(f"‚ùå Tinkoff API: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ MOEX: {e}")
        return 0

    allowed_classes = {"TQBR", "TQTF", "TQTD"}
    filtered = {}
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –±—ã—Å—Ç—Ä—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
    for s in shares.instruments:
        try:
            ticker = (getattr(s, "ticker", None) or "").strip()
            if not ticker or ticker not in moex_raw:
                continue

            class_code = (getattr(s, "class_code", None) or "").strip()
            if class_code not in allowed_classes:
                continue

            cur = getattr(s, "currency", None)
            cur = str(cur).lower() if cur is not None else "rub"
            if "rub" not in cur:
                continue

            buy_ok = bool(getattr(s, "buy_available_flag", True))
            api_ok = bool(getattr(s, "api_trade_available_flag", True))
            qual_only = bool(getattr(s, "for_qual_investor_flag", False))
            if not (buy_ok and api_ok):
                continue
            if qual_only:
                continue

            lot = int(getattr(s, "lot", moex_raw[ticker]["lot"]) or moex_raw[ticker]["lot"])
            name = (getattr(s, "name", None) or moex_raw[ticker]["name"]).strip()
            filtered[ticker] = {"name": name, "lot": lot}
        except Exception:
            continue

    if not filtered:
        logger.warning("‚ö†Ô∏è MOEX‚ÜíTinkoff —Ñ–∏–ª—å—Ç—Ä –æ—Ç—Å–µ—è–ª –≤—Å–µ —Ç–∏–∫–µ—Ä—ã")
        return 0

    try:
        with open(CANDIDATES_FILE, "w", encoding="utf-8") as f:
            json.dump(filtered, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ MOEX (—Ñ–∏–ª—å—Ç—Ä Tinkoff): –æ–±–Ω–æ–≤–ª—ë–Ω candidates.json ‚Äî {len(filtered)} —Ç–∏–∫–µ—Ä–æ–≤")
        return len(filtered)
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {CANDIDATES_FILE}: {e}")
        return 0


async def update_candidates_list() -> int:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–ø–¥–µ–π—Ç–µ—Ä: —Å–Ω–∞—á–∞–ª–∞ Tinkoff, –µ—Å–ª–∏ 0 ‚Äî –ø—Ä–æ–±—É–µ–º MOEX.
    """
    n = await update_candidates_list_tinkoff()
    if n == 0:
        logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ä–µ–∑–µ—Ä–≤ MOEX (Tinkoff –≤–µ—Ä–Ω—É–ª 0)")
        n = await update_candidates_list_moex()
    return n


async def refresh_candidates_periodically(interval_hours: int = 24):
    while True:
        try:
            n = await update_candidates_list()
            logger.info(f"üóìÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {n} —Ç–∏–∫–µ—Ä–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
        await asyncio.sleep(interval_hours * 3600)

def save_tickers():
    try:
        with open(TICKERS_FILE, "w", encoding="utf-8") as f:
            json.dump(TICKERS, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–æ–≤: {e}")

def load_tickers():
    global TICKERS
    try:
        with open(TICKERS_FILE, "r", encoding="utf-8") as f:
            TICKERS.update(json.load(f))
            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–∏–∫–µ—Ä—ã:", TICKERS)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        save_tickers()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ä–æ–≤: {e}")

async def update_candidates_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
    try:
        count = await update_candidates_list()
        await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {count} —Ç–∏–∫–µ—Ä–æ–≤ –≤ candidates.json")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

async def debug_aflt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        ticker = "AFLT"
        # –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ª–æ—Ç –∏–∑ candidates.json; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10
        lot = 10
        name = "–ê—ç—Ä–æ—Ñ–ª–æ—Ç"
        try:
            with open(CANDIDATES_FILE, "r", encoding="utf-8") as f:
                cands = json.load(f)
            if isinstance(cands, dict) and ticker in cands:
                lot = int(cands[ticker].get("lot", lot) or lot)
                name = cands[ticker].get("name", name) or name
        except Exception:
            pass

        await reply_safe(update, f"üîç –ü—Ä–æ–≤–µ—Ä—è—é {name} ({ticker})‚Ä¶")

        price = await get_moex_price(ticker)
        prices = await load_moex_history(ticker, days=250)

        if price is None:
            await reply_safe(update, "‚ùå –¶–µ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å MOEX.")
            return
        if not prices:
            await reply_safe(update, "‚ùå –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.")
            return

        lot_price = price * lot
        score = score_from_prices_local(prices)
        signal = analyze_from_prices(ticker, prices)

        await reply_safe(update,
            "üìä *Debug AFLT*\n"
            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"‚Ä¢ –õ–æ—Ç: {lot} —à—Ç\n"
            f"‚Ä¢ –¶–µ–Ω–∞ 1 —à—Ç: {price:.2f} ‚ÇΩ\n"
            f"‚Ä¢ –¶–µ–Ω–∞ –ª–æ—Ç–∞: *{lot_price:.2f} ‚ÇΩ*\n"
            f"‚Ä¢ –¢–æ—á–µ–∫ –∏—Å—Ç–æ—Ä–∏–∏: {len(prices)}\n"
            f"‚Ä¢ Score: *{score:.2f}*\n"
            f"‚Ä¢ –°–∏–≥–Ω–∞–ª: {signal or '‚Äî'}"
        )
    except Exception as e:
        logger.error(f"debug_aflt error: {e}")
        await reply_safe(update, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ /debug_aflt ‚Äî —Å–º. –ª–æ–≥–∏.")

async def _moex_fetch_lot_size(ticker: str) -> Optional[int]:
    boards = ["TQBR", "TQTF", "TQTD"]
    async with aiohttp.ClientSession() as session:
        for board in boards:
            try:
                url = (f"https://iss.moex.com/iss/engines/stock/markets/shares/boards/"
                       f"{board}/securities/{ticker}.json?iss.meta=off&iss.only=securities")
                async with session.get(url, timeout=15) as resp:
                    data = await resp.json()
                tbl = data.get("securities", {})
                cols = tbl.get("columns", [])
                rows = tbl.get("data", [])
                if not cols or not rows:
                    continue
                idx = {c: i for i, c in enumerate(cols)}
                i_lot = idx.get("LOTSIZE")
                if i_lot is None:
                    continue
                lot = rows[0][i_lot]
                if lot:
                    return max(int(lot), 1)
            except Exception:
                continue
    return None

async def get_trade_price(ticker: str) -> float:
    t = ticker.upper()
    try:
        client = TCS_CLIENT
        async with TCS_SEM:
            shares = await client.instruments.shares()
            figi = next((getattr(s, "figi", None)
                         for s in shares.instruments
                         if (getattr(s, "ticker", "") or "").upper() == t), None)
            if figi:
                try:
                    ob = await client.market_data.get_order_book(figi=figi, depth=1)
                    if ob.asks:
                        a = ob.asks[0].price
                        return float(a.units + a.nano * 1e-9)
                except Exception:
                    pass
                lp = await client.market_data.get_last_prices(figi=[figi])
                if lp.last_prices:
                    p = lp.last_prices[0].price
                    return float(p.units + p.nano * 1e-9)
    except Exception as e:
        logger.warning(f"Tinkoff trade price failed for {t}: {e}")
    return await get_price(t)

async def _tinkoff_fetch_lot_size(ticker: str) -> Optional[int]:
    try:
        client = TCS_CLIENT
        async with TCS_SEM:
            shares = await client.instruments.shares()
        for s in shares.instruments:
            if (getattr(s, "ticker", "") or "").upper() == ticker.upper():
                lot = int(getattr(s, "lot", 1) or 1)
                return max(lot, 1)
    except Exception:
        pass
    return None

async def get_lot_size(ticker: str) -> int:
    t = ticker.upper()

    # 1) –∫—ç—à
    if t in LOTS_CACHE:
        return LOTS_CACHE[t]

    # 2) candidates.json
    try:
        with open(CANDIDATES_FILE, "r", encoding="utf-8") as f:
            cands = json.load(f)
        if isinstance(cands, dict) and t in cands:
            lot = int(cands[t].get("lot", 0) or 0)
            if lot > 0:
                LOTS_CACHE[t] = lot
                return lot
    except Exception:
        pass

    # 3) Tinkoff API
    lot = await _tinkoff_fetch_lot_size(t)
    if lot:
        LOTS_CACHE[t] = lot
        return lot

    # 4) MOEX ISS
    lot = await _moex_fetch_lot_size(t)
    if lot:
        LOTS_CACHE[t] = lot
        return lot

    # 5) –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —Å—Ç–∞—Ä–∞—è –∫–∞—Ä—Ç–∞ LOTS –∏–ª–∏ 1
    lot = int(LOTS.get(t, 1))
    LOTS_CACHE[t] = max(lot, 1)
    return LOTS_CACHE[t]

def save_portfolio():
    try:
        if not isinstance(portfolio, dict):
            raise ValueError("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict")

        for ticker, data in portfolio.items():
            if not isinstance(data, dict) or "price" not in data or "amount" not in data:
                raise ValueError(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ {ticker}: {data}")

        with open("portfolio.json", "w", encoding="utf-8") as f:
            json.dump(portfolio, f, ensure_ascii=False, indent=2)
        enqueue_git_push("Update portfolio.json")
        print("‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", portfolio)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

def load_portfolio():
    global portfolio
    try:
        if not os.path.exists("portfolio.json"):
            print("üìÇ –§–∞–π–ª –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π.")
            save_portfolio()
            return

        with open("portfolio.json", "r", encoding="utf-8") as f:
            data = json.load(f)

        if not isinstance(data, dict):
            raise ValueError("‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–≤—Ä–µ–∂–¥—ë–Ω (–æ–∂–∏–¥–∞–ª—Å—è dict)")

        for ticker, item in data.items():
            if not isinstance(item, dict) or "price" not in item or "amount" not in item:
                raise ValueError(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è {ticker}: {item}")

        portfolio.clear()
        portfolio.update(data)
        print("‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:", portfolio)

    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        portfolio.clear()
        save_portfolio()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        portfolio.clear()
        save_portfolio()

def score_from_prices_local(prices: List[float]) -> float:
    # —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º, —á—Ç–æ –≤ suggest_ideas_by_budget
    if len(prices) < 30:
        return -1.0
    deltas = np.diff(prices)
    gains = np.where(deltas > 0, deltas, 0.0)
    losses = np.where(deltas < 0, -deltas, 0.0)
    period = 14
    if len(deltas) < period:
        return -1.0
    avg_gain = np.mean(gains[:period])
    avg_loss = np.mean(losses[:period])
    for i in range(period, len(deltas)):
        avg_gain = (avg_gain * (period - 1) + gains[i]) / period
        avg_loss = (avg_loss * (period - 1) + losses[i]) / period
    rsi = 100.0 if avg_loss == 0 else 100 - (100 / (1 + (avg_gain / max(avg_loss, 1e-12))))
    bonus = 0.0
    if len(prices) >= 120:
        sma50 = float(np.mean(prices[-50:]))
        sma120 = float(np.mean(prices[-120:]))
        if sma50 > sma120:
            bonus = 10.0
    return float(round((100 - rsi) + bonus, 2))


def save_history():
    try:
        with open("history.json", "w", encoding="utf-8") as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
        enqueue_git_push("Update portfolio.json")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def load_history():
  global history
  try:
      with open("history.json", "r", encoding="utf-8") as f:
          history.extend(json.load(f))
  except FileNotFoundError:
      save_history()
  except Exception as e:
      print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

async def buy_from_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await safe_answer(query)
    data = query.data

    if data.startswith("buy_"):
        ticker = query.data.split("_", 1)[1]
        context.user_data['buy_ticker'] = ticker
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {ticker} (–≤ —Ä—É–±–ª—è—Ö):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
        )
        return BUY_PRICE

async def get_moex_price(ticker: str) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É 1 –∞–∫—Ü–∏–∏ (–Ω–µ –ª–æ—Ç–∞) —Å MOEX.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: LAST ‚Üí MARKETPRICETODAY ‚Üí MARKETPRICE ‚Üí LCURRENTPRICE ‚Üí
               PREVLEGALCLOSEPRICE/LEGALCLOSEPRICE ‚Üí PREVPRICE ‚Üí (BID+ASK)/2."""
    boards = ["TQBR", "TQTF", "TQTD"]
    async with aiohttp.ClientSession() as session:
        last_err = None
        for board in boards:
            try:
                url = (
                    f"https://iss.moex.com/iss/engines/stock/markets/shares/boards/"
                    f"{board}/securities/{ticker}.json?iss.only=marketdata&iss.meta=off"
                )
                async with session.get(url, timeout=15) as resp:
                    data = await resp.json()

                md = data.get("marketdata", {})
                cols = {c: i for i, c in enumerate(md.get("columns", []))}
                rows = md.get("data") or []
                if not cols or not rows:
                    continue
                row = rows[0]

                def val(name: str):
                    i = cols.get(name)
                    v = row[i] if i is not None else None
                    return float(v) if isinstance(v, (int, float)) and v > 0 else None

                candidates = [
                    val("LAST"),
                    val("MARKETPRICETODAY"),
                    val("MARKETPRICE"),
                    val("LCURRENTPRICE"),
                    val("PREVLEGALCLOSEPRICE") or val("LEGALCLOSEPRICE"),
                    val("PREVPRICE"),
                ]
                for v in candidates:
                    if v:
                        return v

                bid, ask = val("BID"), val("OFFER")
                if bid and ask:
                    return (bid + ask) / 2
            except Exception as e:
                last_err = e
                continue
    raise ValueError(f"–ù–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker} ({last_err})")

async def get_price(ticker: str) -> float:
    t = ticker.upper()

    # 1) Tinkoff Invest (–ø–æ—á—Ç–∏ realtime)
    try:
        client = TCS_CLIENT
        async with TCS_SEM:
            shares = await client.instruments.shares()
            figi = None
            for s in shares.instruments:
                if (getattr(s, "ticker", "") or "").upper() == t:
                    figi = getattr(s, "figi", None)
                    break
            if figi:
                lp = await client.market_data.get_last_prices(figi=[figi])
                if lp.last_prices:
                    p = lp.last_prices[0].price
                    return float(p.units + p.nano * 1e-9)
    except Exception as e:
        logger.warning(f"Tinkoff last price failed for {t}: {e}")

    # 2) MOEX ISS (–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ ~15 –º–∏–Ω—É—Ç)
    boards = ["TQBR", "TQTF", "TQTD"]
    async with aiohttp.ClientSession() as session:
        last_err = None
        for board in boards:
            try:
                url = (
                    f"https://iss.moex.com/iss/engines/stock/markets/shares/boards/"
                    f"{board}/securities/{t}.json?iss.only=marketdata&iss.meta=off"
                )
                async with session.get(url, timeout=15) as resp:
                    data = await resp.json()
                md = data.get("marketdata", {})
                cols = {c: i for i, c in enumerate(md.get("columns", []))}
                rows = md.get("data") or []
                if not cols or not rows:
                    continue
                row = rows[0]

                def val(name: str):
                    i = cols.get(name)
                    if i is None:
                        return None
                    v = row[i]
                    return float(v) if isinstance(v, (int, float)) and v > 0 else None

                for candidate in (
                    "LAST",
                    "MARKETPRICETODAY",
                    "MARKETPRICE",
                    "LCURRENTPRICE",
                    "PREVLEGALCLOSEPRICE",
                    "LEGALCLOSEPRICE",
                    "PREVPRICE",
                ):
                    v = val(candidate)
                    if v:
                        return v

                bid, ask = val("BID"), val("OFFER")
                if bid and ask:
                    return (bid + ask) / 2
            except Exception as e:
                last_err = e
                continue

    raise ValueError(f"–ù–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker} ({last_err})")

async def show_open_trades(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await safe_answer(query)
    try:
        data = _load_open_trades_safe("open_trades.json")
        if not data:
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]])
            await query.edit_message_text("üì≠ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç.", reply_markup=kb)
            return

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        blocks = ["üìë *–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:*", ""]
        for t, tr in data.items():
            if tr.get("status") == "closed":
                continue
            blocks.append(_fmt_trade_block(t, tr))

        # –µ—Å–ª–∏ –≤—Å–µ –∑–∞–∫—Ä—ã—Ç—ã ‚Äî —Ç–æ–∂–µ —Å–∫–∞–∂–µ–º
        text = "\n".join(blocks).strip()
        if text == "üìë *–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:*":
            text = "üì≠ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç."

        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]])
        await query.edit_message_text(text, reply_markup=kb, parse_mode="Markdown")
    except Exception as e:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]])
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}", reply_markup=kb)

def upsert_open_trade(ticker: str, name: str, entry_price: float, tp1: float, tp2: float, sl: float):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—É—é —Å–¥–µ–ª–∫—É –≤ —Ñ–∞–π–ª open_trades.json"""
    try:
        if os.path.exists(OPEN_TRADES_FILE):
            with open(OPEN_TRADES_FILE, "r", encoding="utf-8") as f:
                trades = json.load(f)
        else:
            trades = {}

        trades[ticker] = {
            "name": name,
            "entry_price": entry_price,
            "tp1": tp1,
            "tp2": tp2,
            "sl": sl,
            "status": "open",
            "created_at": datetime.now().isoformat()
        }

        with open(OPEN_TRADES_FILE, "w", encoding="utf-8") as f:
            json.dump(trades, f, ensure_ascii=False, indent=2)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏ {ticker}: {e}")

# --- helpers –¥–ª—è —ç–∫—Ä–∞–Ω–∞ "–°–¥–µ–ª–∫–∏" ---
def _load_open_trades_safe(path: str = "open_trades.json") -> dict:
    try:
        if not os.path.exists(path) or os.path.getsize(path) == 0:
            return {}
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
        return data if isinstance(data, dict) else {}
    except Exception:
        # —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç/–ø–æ–≤—Ä–µ–∂–¥—ë–Ω –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ
        return {}

def _fmt_trade_block(ticker: str, tr: dict) -> str:
    name = tr.get("name", ticker)
    status = tr.get("status", "open")
    entry = tr.get("entry_price")
    tp1 = tr.get("tp1"); tp2 = tr.get("tp2"); sl = tr.get("sl")
    lot_size = int(tr.get("lot_size", 1))
    qty = int(tr.get("qty", 0))
    lots = (qty // max(lot_size, 1)) if qty else 0

    # —Ç—Ä–µ–π–ª–∏–Ω–≥
    trail_on = bool(tr.get("trail_active", False))
    trail_flag = "üü¢ –≤–∫–ª" if trail_on else "‚ö™Ô∏é –≤—ã–∫–ª"
    trail_anchor = tr.get("trail_anchor")
    trail_sl = tr.get("trail_sl")

    created = tr.get("created_at", "")
    # –∫—Ä–∞—Å–∏–≤–æ: "2025-08-10 12:34:56"
    created_hhmm = (created[:19].replace("T", " ")) if isinstance(created, str) else ""

    status_emoji = {"open": "üü©", "tp1_hit": "üü®", "closed": "üü•"}.get(status, "üü¶")

    lines = [
        f"{status_emoji} *{name}* ({ticker}) ‚Äî {status}",
        f"  –í—Ö–æ–¥: {entry:.2f} ‚ÇΩ | TP1: {tp1:.2f} ‚ÇΩ | TP2: {tp2:.2f} ‚ÇΩ | SL: {sl:.2f} ‚ÇΩ",
        f"  –û–±—ä—ë–º: {qty} –∞–∫—Ü. (~{lots} –ª–æ—Ç., –ª–æ—Ç {lot_size})",
        f"  –¢—Ä–µ–π–ª–∏–Ω–≥: {trail_flag}" + (f" | Anchor: {trail_anchor:.2f} ‚ÇΩ | Trail SL: {trail_sl:.2f} ‚ÇΩ" if trail_on and trail_anchor and trail_sl else ""),
        f"  –°–∏–≥–Ω–∞–ª –æ—Ç: {created_hhmm}",
        ""
    ]
    return "\n".join(lines)

async def trades_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = _load_open_trades_safe("open_trades.json")
        if not data:
            await update.message.reply_text("üì≠ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç.")
            return

        blocks = ["üìë *–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:*", ""]
        for t, tr in data.items():
            if tr.get("status") == "closed":
                continue
            blocks.append(_fmt_trade_block(t, tr))

        text = "\n".join(blocks).strip()
        if text == "üìë *–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:*":
            text = "üì≠ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç."
        await update.message.reply_text(text, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")

async def lot_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /lot <TICKER>")
        return
    t = context.args[0].upper()
    lot = await get_lot_size(t)
    await update.message.reply_text(f"{t}: –ª–æ—Ç = {lot}")

async def load_moex_history(ticker: str, days: int = 250) -> List[float]:
    boards = ["TQBR", "TQTF", "TQTD"]
    async with aiohttp.ClientSession() as session:
        last_err = None
        for board in boards:
            try:
                url = f"https://iss.moex.com/iss/history/engines/stock/markets/shares/boards/{board}/securities/{ticker}.json?limit={days}"
                async with session.get(url, timeout=20) as response:
                    data = await response.json()
                history_data = data.get("history", {})
                columns = history_data.get("columns", [])
                rows = history_data.get("data", [])
                if not columns or not rows:
                    continue
                close_idx = columns.index("CLOSE")
                prices = [row[close_idx] for row in rows if row[close_idx] is not None]
                if prices:
                    return prices
            except Exception as e:
                last_err = e
                continue
    raise ValueError(f"–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker} –Ω–∞ MOEX ({last_err})")

async def load_history_any(ticker: str, days: int = 250) -> List[float]:
    # 1) –ü—ã—Ç–∞–µ–º—Å—è MOEX —Å —Ä–µ—Ç—Ä–∞—è–º–∏
    for attempt in range(3):
        try:
            prices = await load_moex_history(ticker, days=days)
            if prices:
                return prices
            break
        except Exception as e:
            if attempt < 2:
                await asyncio.sleep(1.5 * (attempt + 1))
            else:
                logger.info(f"MOEX history fail for {ticker}: {e}")

    # 2) –§–æ–ª–±—ç–∫: –¥–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏ –∏–∑ Tinkoff (CLOSE)
    try:
        frm = datetime.utcnow() - timedelta(days=days + 5)
        to = datetime.utcnow()
        client = TCS_CLIENT
        async with TCS_SEM:
            shares = await client.instruments.shares()
            figi = next((getattr(s, "figi", None)
                         for s in shares.instruments
                         if (getattr(s, "ticker", "") or "").upper() == ticker.upper()), None)
            if not figi:
                return []
            candles = await client.market_data.get_candles(
                figi=figi, from_=frm, to=to, interval=CandleInterval.CANDLE_INTERVAL_DAY
            )
            closes = []
            for c in candles.candles:
                p = c.close
                closes.append(float(p.units + p.nano * 1e-9))
            return closes
    except Exception as e:
        logger.info(f"Tinkoff candles fail for {ticker}: {e}")
        return []

def calculate_rsi(prices: List[float], period: int = 14) -> Optional[float]:
     if len(prices) < period + 1:
         return None
     deltas = np.diff(prices)
     gains = np.where(deltas > 0, deltas, 0)
     losses = np.where(deltas < 0, -deltas, 0)
     avg_gain = np.mean(gains[:period])
     avg_loss = np.mean(losses[:period])
     for i in range(period, len(deltas)):
         gain = gains[i]
         loss = losses[i]
         avg_gain = (avg_gain * (period - 1) + gain) / period
         avg_loss = (avg_loss * (period - 1) + loss) / period
     if avg_loss == 0:
         return 100.0
     rs = avg_gain / avg_loss
     rsi = 100 - (100 / (1 + rs))
     return round(rsi, 2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ü–∏–π.\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=main_menu_kb()
    )

def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")],
        [InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–ø–ª–∞–Ω –∑–∞—è–≤–æ–∫)", callback_data="portfolio_plan")],  # NEW
        [InlineKeyboardButton("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏", callback_data="watchlist")],
        [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
        [InlineKeyboardButton("–°–¥–µ–ª–∫–∏", callback_data="open_trades")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä", callback_data="add_ticker")],
        [InlineKeyboardButton("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏", callback_data="ideas_menu")]
    ])

async def fetch_accounts():
    client = TCS_CLIENT
    async with TCS_SEM:
        accounts = await client.users.get_accounts()
        for account in accounts.accounts:
            print(f"ID: {account.id}, Type: {account.type}")
async def check_api(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
    client = TCS_CLIENT
    async with TCS_SEM:
        accounts = await client.users.get_accounts()
            await update.message.reply_text(f"‚úÖ Tinkoff API –¥–æ—Å—Ç—É–ø–µ–Ω. –°—á–µ—Ç–æ–≤: {len(accounts.accounts)}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Tinkoff API: {str(e)}")


async def fetch_price_and_analysis(ticker, name):
    try:
        trade_price = await get_trade_price(ticker)
        if trade_price is None:
            raise RuntimeError("–ù–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")

        lot = await get_lot_size(ticker)
        lot_price = trade_price * lot
        price_str = f"{trade_price:.2f} ‚ÇΩ √ó {lot} = {lot_price:.2f} ‚ÇΩ (–ª–æ—Ç)"
    except Exception:
        return f"{name} ({ticker}) ‚Äî –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã", ticker

    try:
        analysis_text = await analyze_stock(ticker)
        if analysis_text:
            analysis_text = f" ‚Äî {analysis_text}"
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {ticker}: {e}")
        analysis_text = " ‚Äî –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    return f"{name} ({ticker}) ‚Äî {price_str}{analysis_text}", ticker

def analyze_from_prices(ticker: str, prices: list[float]) -> str:
    from analysis import analyze_stock_from_prices
    return analyze_stock_from_prices(ticker, prices)

async def show_watchlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ü–∏–π —Å —Ü–µ–Ω–∞–º–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º"""
    query = update.callback_query
    await safe_answer(query)

    if not TICKERS:
        await query.edit_message_text("üì≠ –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ü–∏–π –ø—É—Å—Ç.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
        results = await asyncio.gather(
            *(fetch_price_and_analysis(ticker, name) for ticker, name in TICKERS.items()),
            return_exceptions=True  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        )

        msg = "üìà *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏:*\n\n"
        keyboard = []

        for result in results:
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {result}")
                continue

            line, ticker = result
            if not ticker:
                continue

            # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É: "<–Ω–∞–∑–≤–∞–Ω–∏–µ> (<—Ç–∏–∫–µ—Ä>) ‚Äî <—Ü–µ–Ω–∞> ‚Äî <–∞–Ω–∞–ª–∏–∑>"
            try:
                name_part, rest = line.split(" ‚Äî ", 1)
                msg += f"üìå *{name_part}*\nüí≤ {rest}\n\n"
            except Exception:
                msg += line + "\n\n"

            keyboard.append([
                InlineKeyboardButton(f"‚úîÔ∏è {ticker}", callback_data=f"buy_{ticker}"),
                InlineKeyboardButton("‚ùå", callback_data=f"remove_{ticker}"),
                InlineKeyboardButton("üìä", callback_data=f"signals_{ticker}"),
                InlineKeyboardButton("üîó", url=f"https://www.tinkoff.ru/invest/stocks/{ticker}")
            ])
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")])

        await query.edit_message_text(
            msg,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_watchlist: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_detailed_signals(update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str):
    try:
        text = await analyze_stock(ticker, detailed=True)
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="watchlist")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {ticker}: {e}")
        await update.callback_query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã.")

async def get_moex_quote(ticker: str, board: str = "TQBR") -> dict:
    # –≤–µ—Ä–Ω—ë—Ç: {"last": float|None, "bid": float|None, "ask": float|None}
    import aiohttp
    url = (f"https://iss.moex.com/iss/engines/stock/markets/shares/boards/"
           f"{board}/securities/{ticker}.json?iss.meta=off&iss.only=marketdata")
    async with aiohttp.ClientSession() as session:
        async with session.get(url, timeout=15) as resp:
            data = await resp.json()

    md = data.get("marketdata", {})
    cols = md.get("columns", [])
    rows = md.get("data", [])
    if not cols or not rows:
        return {"last": None, "bid": None, "ask": None}

    i = {c: idx for idx, c in enumerate(cols)}
    row = rows[0]

    def take(field):
        j = i.get(field)
        if j is None:
            return None
        v = row[j]
        return float(v) if isinstance(v, (int, float)) and v > 0 else None

    return {
        "last": take("LAST"),
        "bid":  take("BID"),
        "ask":  take("OFFER")
    }

async def show_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏—Ç–æ–≥–∞–º–∏ (–ø–æ–∑–∏—Ü–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è)"""
    query = update.callback_query
    await safe_answer(query)

    if not portfolio:
        await query.edit_message_text("üì≠ –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.")
        return

    try:
        msg = "üìä –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n"
        keyboard = []
        tasks = []

        for ticker, data in portfolio.items():
            tasks.append(get_portfolio_position_info(ticker, data))

        position_infos = await asyncio.gather(*tasks, return_exceptions=True)

        total_invested = 0.0   # –ø–æ —Ç–µ–∫—É—â–∏–º –ø–æ–∑–∏—Ü–∏—è–º (avg price √ó –∫–æ–ª-–≤–æ –∞–∫—Ü–∏–π)
        total_current = 0.0    # —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π —Å–µ–π—á–∞—Å

        for info in position_infos:
            if isinstance(info, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–∏: {info}")
                continue

            msg += info.get("message", "")
            keyboard.append(info.get("buttons", []))
            total_invested += float(info.get("invested", 0.0))
            total_current  += float(info.get("current", 0.0))

        total_profit = total_current - total_invested
        total_profit_pct = (total_profit / total_invested * 100) if total_invested > 0 else 0.0

        msg += (
            "\n"
            f"üí∞ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_profit:+.2f} ‚ÇΩ ({total_profit_pct:+.2f}%)\n"
            f"üì¶ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø–æ —Ä—ã–Ω–∫—É): {total_current:.2f} ‚ÇΩ\n"
            f"üì• –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ (–ø–æ —Ç–µ–∫—É—â–∏–º –ø–æ–∑–∏—Ü–∏—è–º): {total_invested:.2f} ‚ÇΩ"
        )

        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")])

        await query.edit_message_text(
            msg,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_portfolio: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def calc_history_invested() -> float:
    """–°—É–º–º–∞ –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –∏–∑ history (action == 'buy'). –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –∏ 'n/a'."""
    total = 0.0
    for r in history:
        try:
            if isinstance(r, dict) and r.get("action") == "buy":
                t = r.get("total")
                if isinstance(t, (int, float)):
                    total += float(t)
                else:
                    p = r.get("price")
                    a = r.get("amount")
                    if isinstance(p, (int, float)) and isinstance(a, (int, float)):
                        total += float(p) * float(a)
        except Exception:
            continue
    return round(total, 2)

async def get_portfolio_position_info(ticker: str, data: dict) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Å—É–º–º–∞–º–∏ –¥–ª—è –∏—Ç–æ–≥–∞"""
    try:
        trade_price = await get_trade_price(ticker)
        if trade_price is None:
            raise RuntimeError("–ù–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")

        current_price = float(trade_price)
        purchase_price = float(data["price"])
        amount_shares = int(data["amount"])  # —ç—Ç–æ –®–¢–£–ö–ò (–∞–∫—Ü–∏–∏), –Ω–µ –ª–æ—Ç—ã!
        lot_size = await get_lot_size(ticker)

        invested = purchase_price * amount_shares
        current_value = current_price * amount_shares

        if purchase_price > 0:
            profit_pct = ((current_price - purchase_price) / purchase_price) * 100
        else:
            profit_pct = 0.0
        profit_abs = current_value - invested

        emoji = "üü¢" if current_price > purchase_price else ("üîª" if current_price < purchase_price else "‚ûñ")

        try:
            analysis_text = await analyze_stock(ticker)
            signal_line = (analysis_text or "").strip().split("\n")[0] or "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        except Exception as e:
            signal_line = "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {ticker}: {e}")

        message = (
            f"\nüìå {TICKERS.get(ticker, ticker)} ({ticker})\n"
            f"‚îú –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_price:.2f} ‚ÇΩ\n"
            f"‚îú –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} ‚ÇΩ {emoji}\n"
            f"‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount_shares} —à—Ç (–ª–æ—Ç {lot_size})\n"
            f"‚îú –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {profit_pct:+.2f}% ({profit_abs:+.2f} ‚ÇΩ)\n"
            f"‚îî {signal_line}\n"
        )

        buttons = [
            InlineKeyboardButton(f"‚úîÔ∏è {ticker}", callback_data=f"buy_{ticker}"),
            InlineKeyboardButton(f"‚ùå", callback_data=f"sell_{ticker}"),
            InlineKeyboardButton("üìä", callback_data=f"signals_{ticker}")
        ]
        return {
            "message": message,
            "buttons": buttons,
            "invested": invested,
            "current": current_value
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {ticker}: {e}")
        return {
            "message": f"\n‚ö†Ô∏è {ticker}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n",
            "buttons": [
                InlineKeyboardButton(f"‚ùå –û—à–∏–±–∫–∞ {ticker}", callback_data="error"),
                InlineKeyboardButton(f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å {ticker}", callback_data=f"refresh_{ticker}")
            ],
            "invested": 0.0,
            "current": 0.0
        }

async def show_portfolio_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await safe_answer(query)

    if not portfolio:
        await query.edit_message_text("üì≠ –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.")
        return

    try:
        # —Å–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Ü–µ–Ω—ã –∏ –ª–æ—Ç—ã
        tasks = []
        for ticker, data in portfolio.items():
            tasks.append(get_trade_price(ticker))
        prices = await asyncio.gather(*tasks, return_exceptions=True)

        lines = ["üß≠ *–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è ‚Äî –ø–ª–∞–Ω –∑–∞—è–≤–æ–∫*", ""]
        kb_rows = []

        for (ticker, data), px in zip(portfolio.items(), prices):
            if isinstance(px, Exception) or px is None:
                lines.append(f"‚Ä¢ {ticker}: —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue

            lot_size = await get_lot_size(ticker)
            qty_shares = int(data["amount"])
            entry = float(data["price"])
            plan = build_portfolio_order_plan(
                ticker=ticker,
                current_price=float(px),
                entry_price=entry,
                qty_shares=qty_shares,
                lot_size=lot_size,
            )

            name = ticker  # –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ —Ç–∏–∫–µ—Ä–æ–≤->–∏–º—ë–Ω ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –∏–º—è
            lines.append(f"üîπ *{name}* ({ticker})")
            lines.append(f"  –í—Ö–æ–¥: {plan['entry']:.2f} ‚ÇΩ | –¢–µ–∫—É—â–∞—è: {plan['current']:.2f} ‚ÇΩ")
            lines.append(f"  –õ–æ—Ç: {plan['lot_size']} | –û–±—ä—ë–º: {plan['qty_shares']} –∞–∫—Ü. "
                         f"(~{plan['qty_shares']//max(plan['lot_size'],1)} –ª–æ—Ç.)")
            lines.append(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            # –í—ã–≤–µ–¥–µ–º –¥–≤–µ ¬´–≤–µ—Ç–∫–∏¬ª TP (–µ–¥–∏–Ω—ã–π –∏ 50/50) –∏ –¥–≤–∞ —Å—Ç–æ–ø–∞
            # –î–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏ ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ –¥—É–±–ª–µ–π
            tp_shown = set()
            for leg in plan["legs"]:
                if leg.kind == "take_profit":
                    key = (leg.kind, leg.activation, leg.lots)
                    if key in tp_shown:
                        continue
                    tp_shown.add(key)
                price_note = f" ‚Üí –ª–∏–º–∏—Ç {leg.limit:.2f} ‚ÇΩ" if leg.limit else ""
                lines.append(
                    f"    ‚Ä¢ {leg.what}: {leg.activation:.2f} ‚ÇΩ ¬∑ {leg.lots} –ª–æ—Ç(–∞){price_note}"
                    + (f"  ‚Äî {leg.note}" if leg.note else "")
                )
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –±—É–º–∞–≥–∞–º–∏

            kb_rows.append([
                InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", url=f"https://www.tinkoff.ru/invest/stocks/{ticker}")
            ])

        lines.append("_–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞—è–≤–æ–∫ —É–∫–∞–∑–∞–Ω–∞ –≤—ã—à–µ –≤ –∫–∞–∂–¥–æ–º –ø—É–Ω–∫—Ç–µ._")
        kb_rows.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")])
        await query.edit_message_text(
            "\n".join(lines),
            reply_markup=InlineKeyboardMarkup(kb_rows),
            parse_mode="Markdown"
        )
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
  query = update.callback_query
  await safe_answer(query)
  data = query.data

  if data == "portfolio":
      await show_portfolio(update, context)

  elif data == "watchlist":
      await show_watchlist(update, context)

  elif data == "reset":
      await reset_portfolio(update, context)

  elif data == "add_ticker":
    await query.edit_message_text(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/addticker <–¢–ò–ö–ï–†> <–ù–ê–ó–í–ê–ù–ò–ï>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "/addticker AAPL Apple"
    )
  elif data == "update_candidates":
      await safe_answer(query)
      await query.edit_message_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
      try:
         count = await update_candidates_list()
         await query.edit_message_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {count} —Ç–∏–∫–µ—Ä–æ–≤.")
      except Exception as e:
         await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
  elif data == "history":
      if not history:
          await query.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞.")
      else:
          msg = "üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
          for record in reversed(history[-10:]):
              msg += (f"\nüõí {record['action'].upper()} {record['ticker']} ‚Äî "
                      f"{record['amount']} —à—Ç –ø–æ {record['price']} ‚ÇΩ "
                      f"(–Ω–∞ {record['total']} ‚ÇΩ)")
          keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
          reply_markup = InlineKeyboardMarkup(keyboard)
          await query.edit_message_text(msg, reply_markup=reply_markup)

  elif data == "ideas_menu":
    keyboard = [
        [InlineKeyboardButton("üí∞ 1000 ‚ÇΩ", callback_data="ideas_1000")],
        [InlineKeyboardButton("üí∞ 3000 ‚ÇΩ", callback_data="ideas_3000")],
        [InlineKeyboardButton("üí∞ 5000 ‚ÇΩ", callback_data="ideas_5000")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="update_candidates")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –∞–∫—Ü–∏–∏:\n\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ –≤—Ä—É—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ideas 1500`",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
  elif data.startswith("add_"):
    ticker = data.split("_", 1)[1]
    # –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥—Ç—è–Ω—É—Ç—å –∏–º—è –∏–∑ candidates.json
    name = ticker
    try:
        with open(CANDIDATES_FILE, "r", encoding="utf-8") as f:
            candidates = json.load(f)
        if isinstance(candidates, dict) and ticker in candidates:
            name = candidates[ticker].get("name", ticker)
    except Exception:
        pass

    if ticker in TICKERS:
        await query.edit_message_text(f"{ticker} —É–∂–µ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
    else:
        TICKERS[ticker] = name
        save_tickers()
        await query.edit_message_text(
            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω {ticker} ‚Äî {name} –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ", callback_data="watchlist")]]
            )
        )

  elif data == "main_menu":
    await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

  elif data == "portfolio_plan":
     # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–±—â–∏–π handler –ø–æ–π–º–∞–µ—Ç —Ä–∞–Ω—å—à–µ —Å–ø–µ—Ü-—Ö–µ–Ω–¥–ª–µ—Ä–∞
    await show_portfolio_plan(update, context)
      
  elif data.startswith("ideas_"):
    budget = data.split("_")[1]
    await safe_answer(query)

    # –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫, —á—Ç–æ–±—ã Telegram –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    try:
        await query.edit_message_text(f"‚è≥ –ü–æ–¥–±–∏—Ä–∞—é –∏–¥–µ–∏ –ø–æ–¥ –±—é–¥–∂–µ—Ç {budget} ‚ÇΩ...")
    except Exception:
        await query.message.reply_text(f"‚è≥ –ü–æ–¥–±–∏—Ä–∞—é –∏–¥–µ–∏ –ø–æ–¥ –±—é–¥–∂–µ—Ç {budget} ‚ÇΩ...")

    context.args = [budget]
    await suggest_ideas_by_budget(update, context)
    return  # –≤–∞–∂–Ω–æ: –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–ª—å—à–µ

  elif data.startswith("sell_"):
      ticker = data.split("_", 1)[1]
      if ticker in portfolio:
          del portfolio[ticker]
          save_portfolio()
          price_history.pop(ticker, None)
          last_signal.pop(ticker, None)

          history.append({
              "ticker": ticker,
              "action": "sell",
              "amount": "–≤—Å—ë",
              "price": "n/a",
              "total": "n/a"
          })
          save_history()

          await query.edit_message_text(f"‚ùå –ü—Ä–æ–¥–∞–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã –∞–∫—Ü–∏–∏ {ticker} –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")
      else:
          await query.edit_message_text("–ê–∫—Ü–∏–π —Å —Ç–∞–∫–∏–º —Ç–∏–∫–µ—Ä–æ–º –Ω–µ—Ç –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ.")

  elif data == "open_trades":
    await show_open_trades(update, context)  

  elif data.startswith("remove_"):
    ticker = data.split("_", 1)[1]
    if ticker in TICKERS:
        del TICKERS[ticker]
        save_tickers()
        await query.edit_message_text(f"–¢–∏–∫–µ—Ä {ticker} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")

  elif data.startswith("signals_"):
    ticker = data.split("_", 1)[1]
    await show_detailed_signals(update, context, ticker)

  else:
    await query.edit_message_text("–¢–∞–∫–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

  return ConversationHandler.END

async def reset_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
       query = update.callback_query
       await safe_answer(query)
       global portfolio, price_history, last_signal, TICKERS
       portfolio.clear()
       price_history.clear()
       last_signal.clear()
       save_portfolio()
       TICKERS = {
           "MTSS": "–ú–¢–°",
           "PHOR": "–§–æ—Å–ê–≥—Ä–æ",
           "SBER": "–°–±–µ—Ä–±–∞–Ω–∫"
       }
       await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω—ã –∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –±–∞–∑–æ–≤–æ–º—É –Ω–∞–±–æ—Ä—É.")

async def daily_portfolio_plan_notifier(application, chat_id: int, hours: int = 24):
    await asyncio.sleep(5)  # –¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –ø–æ–¥–Ω—è—Ç—å—Å—è
    while True:
        try:
            if portfolio:
                # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                tasks = [get_trade_price(t) for t in portfolio.keys()]
                prices = await asyncio.gather(*tasks, return_exceptions=True)
                lines = ["üóìÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –∑–∞—è–≤–æ–∫ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)", ""]
                for (ticker, data), px in zip(portfolio.items(), prices):
                    if isinstance(px, Exception) or px is None:
                        continue
                    lot_size = await get_lot_size(ticker)
                    plan = build_portfolio_order_plan(
                        ticker=ticker,
                        current_price=float(px),
                        entry_price=float(data["price"]),
                        qty_shares=int(data["amount"]),
                        lot_size=lot_size,
                    )
                    lines.append(f"‚Ä¢ {ticker}: TP2 {plan['tp2']:.2f} ‚ÇΩ | SL {plan['sl']:.2f} ‚ÇΩ "
                                 f"({plan['qty_shares']//max(lot_size,1)} –ª–æ—Ç.)")
                if len(lines) > 2:
                    await application.bot.send_message(chat_id=chat_id, text="\n".join(lines))
        except Exception as e:
            logger.error(f"daily_portfolio_plan_notifier: {e}")
        await asyncio.sleep(hours * 3600)

async def buy_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip().lower()
    if text == "/cancel":
        return await buy_cancel(update, context)

    import re
    nums = re.findall(r"\d+[.,]?\d*", text)
    if not nums:
        await update.message.reply_text(
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä:\n"
            "`126.40` ‚Äî —Ü–µ–Ω–∞ –∑–∞ 1 –∞–∫—Ü–∏—é\n"
            "`252.79` ‚Äî –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–æ–±—â–∞—è —Å—É–º–º–∞¬ª",
            parse_mode="Markdown"
        )
        return BUY_PRICE

    price_val = float(nums[0].replace(',', '.'))
    context.user_data['buy_price_raw'] = price_val

    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —Ü–µ–Ω—ã –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–¶–µ–Ω–∞ –∑–∞ 1 –∞–∫—Ü–∏—é", callback_data="price_type_single"),
            InlineKeyboardButton("–û–±—â–∞—è —Å—É–º–º–∞", callback_data="price_type_total"),
        ]
    ])
    await update.message.reply_text(
        f"–í—ã –≤–≤–µ–ª–∏ {price_val:.2f} ‚ÇΩ.\n–£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ –∑–∞ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )
    return BUY_PRICE_TYPE

async def price_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await safe_answer(query)
    data = query.data

    if data == "price_type_single":
        context.user_data['price_is_total'] = False
        note = "üí° –ü–æ–Ω—è–ª: —ç—Ç–æ —Ü–µ–Ω–∞ –∑–∞ 1 –∞–∫—Ü–∏—é."
    elif data == "price_type_total":
        context.user_data['price_is_total'] = True
        note = "üí° –ü–æ–Ω—è–ª: —ç—Ç–æ –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –≤–µ—Å—å –æ–±—ä—ë–º."
    else:
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return BUY_PRICE_TYPE

    lot_size = await get_lot_size(context.user_data.get('buy_ticker'))
    await query.edit_message_text(
        f"{note}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π (–ª–æ—Ç {lot_size}).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel"
    )
    return BUY_AMOUNT

async def reply_safe(update, text: str):
    if update.message:
        await update.message.reply_text(text)
    elif update.callback_query:
        await update.callback_query.message.reply_text(text)

async def send_kb(update: Update, kb: InlineKeyboardMarkup):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —à–ª—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø—Ä–∏ callback_query, –∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ."""
    try:
        if getattr(update, "callback_query", None):
            await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")

async def suggest_ideas_by_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–±–æ—Ä –∏–¥–µ–π –ø–æ–¥ –±—é–¥–∂–µ—Ç: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–±–∞—Ç—á–∞–º–∏ —á–µ—Ä–µ–∑ —Å–µ–º–∞—Ñ–æ—Ä), c —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π."""
    def _score_from_prices_local(prices: List[float]) -> float:
        if len(prices) < 30:
            return -1.0
        deltas = np.diff(prices)
        gains = np.where(deltas > 0, deltas, 0.0)
        losses = np.where(deltas < 0, -deltas, 0.0)
        period = 14
        if len(deltas) < period:
            return -1.0
        avg_gain = np.mean(gains[:period]); avg_loss = np.mean(losses[:period])
        for i in range(period, len(deltas)):
            avg_gain = (avg_gain * (period - 1) + gains[i]) / period
            avg_loss = (avg_loss * (period - 1) + losses[i]) / period
        rsi = 100.0 if avg_loss == 0 else 100 - (100 / (1 + (avg_gain / max(avg_loss, 1e-12))))
        bonus = 0.0
        if len(prices) >= 120:
            sma50 = float(np.mean(prices[-50:])); sma120 = float(np.mean(prices[-120:]))
            if sma50 > sma120:
                bonus = 10.0
        return float(round((100 - rsi) + bonus, 2))

    async def _process_one(ticker: str, info: dict, sem: asyncio.Semaphore, budget: float):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–±–æ dict —Å –ø–æ–ª—è–º–∏ (row), –ª–∏–±–æ dict —Å –ø—Ä–∏—á–∏–Ω–æ–π skip."""
        async with sem:
            try:
                if ticker in TICKERS or ticker in portfolio:
                    return {"skip": "tracked"}
                lot = int(info.get("lot", 1) or 1)
                name = info.get("name", ticker)

                price = await get_moex_price(ticker)
                if price is None:
                    return {"skip": "no_price"}
                lot_price = price * lot
                if lot_price > budget:
                    return {"skip": "budget"}

                prices = await load_history_any(ticker, days=250)
                if not prices or len(prices) < 50:
                    return {"skip": "nohist"}

                score = _score_from_prices_local(prices)
                signal = analyze_from_prices(ticker, prices)

                row = {
                    "ticker": ticker, "name": name, "price": price, "lot": lot,
                    "lot_price": lot_price, "score": score, "signal": signal
                }
                return {"row": row}
            except Exception as e:
                logger.info(f"_process_one skip {ticker}: {e}")
                return {"skip": "error"}

    try:
        # –∞—Ä–≥—É–º–µ–Ω—Ç –±—é–¥–∂–µ—Ç–∞
        if not context.args:
            await reply_safe(update, "üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ideas <–±—é–¥–∂–µ—Ç>\n–ü—Ä–∏–º–µ—Ä: /ideas 1500")
            return
        try:
            budget = float(str(context.args[0]).replace(",", "."))
        except ValueError:
            await reply_safe(update, "‚ùå –ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /ideas 1500")
            return
        if budget <= 0:
            await reply_safe(update, "‚ùå –£–∫–∞–∂–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞")
            return

        # –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        if not os.path.exists(CANDIDATES_FILE) or os.path.getsize(CANDIDATES_FILE) == 0:
            await reply_safe(update, "‚è≥ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø—É—Å—Ç ‚Äî –∑–∞–≥—Ä—É–∂–∞—é –∏–∑ Tinkoff/MOEX...")
            n = await update_candidates_list()
            if n == 0:
                await reply_safe(update, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                return

        with open(CANDIDATES_FILE, "r", encoding="utf-8") as f:
            candidates = json.load(f)
        total = len(candidates)

        # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        sem = asyncio.Semaphore(10)  # –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        tasks = [ _process_one(t, info, sem, budget) for t, info in candidates.items() ]
        results = await asyncio.gather(*tasks, return_exceptions=False)

        # –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º
        hard_hits, soft_hits = [], []
        checked = skipped_tracked = skipped_budget = skipped_nohist = skipped_other = 0

        for res in results:
            if "row" in res:
                checked += 1
                r = res["row"]
                signal = r["signal"] or ""
                if "–ü–æ–∫—É–ø–∞—Ç—å" in signal:
                    hard_hits.append(r)
                elif "–ü–æ–¥–æ–∂–¥–∞—Ç—å" in signal:
                    soft_hits.append(r)
            else:
                reason = res.get("skip")
                if reason == "tracked":
                    skipped_tracked += 1
                elif reason == "budget":
                    skipped_budget += 1
                elif reason == "nohist":
                    skipped_nohist += 1
                else:
                    skipped_other += 1

        def _format(rows: list, title: str):
            rows.sort(key=lambda x: (-x["score"], x["lot_price"]))
            rows = rows[:10]
    
            msg = [f"*üí° {title} –ø–æ–¥ –±—é–¥–∂–µ—Ç {budget:.2f} ‚ÇΩ:*",
                   f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked} –∏–∑ {total}",
                   f"–ò—Å–∫–ª—é—á–µ–Ω–æ ‚Äî –≤ –æ—Ç—Å–ª–µ–∂–∫–µ/–ø–æ—Ä—Ç—Ñ–µ–ª–µ: {skipped_tracked}, –¥–æ—Ä–æ–∂–µ –±—é–¥–∂–µ—Ç–∞: {skipped_budget}, "
                   f"–Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏: {skipped_nohist}, –ø—Ä–æ—á–µ–µ: {skipped_other}",
                   ""]
            kb_rows = []
    
            for r in rows:
                mark = "‚ö†Ô∏è " if "–ü–æ–¥–æ–∂–¥–∞—Ç—å" in (r['signal'] or "") else ""
                msg.extend([
                    f"{mark}*{r['name']}* ({r['ticker']})",
                    f"üí≤ {r['price']:.2f} ‚ÇΩ √ó {r['lot']} = *{r['lot_price']:.2f} ‚ÇΩ*",
                    f"üßÆ Score: {r['score']:.2f}",
                    f"{r['signal']}",
                    ""
                ])
                kb_rows.append([
                    InlineKeyboardButton(f"‚ûï {r['ticker']}", callback_data=f"add_{r['ticker']}"),
                    InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", url=f"https://www.tinkoff.ru/invest/stocks/{r['ticker']}")
                ])
    
            # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª ‚Äî –î–û return –∏ –í–ù–ï —Ü–∏–∫–ª–∞
            kb_rows.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="ideas_menu")])
    
            return "\n".join(msg), InlineKeyboardMarkup(kb_rows) if kb_rows else None

        sent_any = False
        if hard_hits:
            text, kb = _format(hard_hits, "–°–∏–≥–Ω–∞–ª: –ü–æ–∫—É–ø–∞—Ç—å")
            await reply_safe(update, text); sent_any = True
            if kb: await send_kb(update, kb)
        if soft_hits:
            text, kb = _format(soft_hits, "–°–∏–≥–Ω–∞–ª: –ü–æ–¥–æ–∂–¥–∞—Ç—å")
            await reply_safe(update, text + "\n_(–º—è–≥–∫–∏–π —Ñ–∏–ª—å—Ç—Ä)_"); sent_any = True
            if kb: await send_kb(update, kb)

        if not sent_any:
            explain = (
                f"üì≠ –ü–æ–¥ –±—é–¥–∂–µ—Ç {budget:.2f} ‚ÇΩ –∏–¥–µ–π –Ω–µ –Ω–∞—à–ª–æ—Å—å.\n"
                f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked} –∏–∑ {total}, "
                f"–≤ –æ—Ç—Å–ª–µ–∂–∫–µ/–ø–æ—Ä—Ç—Ñ–µ–ª–µ: {skipped_tracked}, "
                f"–¥–æ—Ä–æ–∂–µ –±—é–¥–∂–µ—Ç–∞: {skipped_budget}, "
                f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏: {skipped_nohist}, "
                f"–ø—Ä–æ—á–µ–µ: {skipped_other}.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π —É–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞."
            )
            await send_kb(update, InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="ideas_menu")]]))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ suggest_ideas_by_budget: {e}")
        await reply_safe(update, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–¥–µ–π.")


async def buy_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text == "/cancel":
        return await buy_cancel(update, context)

    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    try:
        amount = int(text)
        if amount <= 0:
            await update.message.reply_text("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return BUY_AMOUNT
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return BUY_AMOUNT

    ticker = context.user_data.get('buy_ticker')
    if not ticker:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–∫–µ—Ä. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–µ–ª—è/–æ—Ç—Å–ª–µ–∂–∫–∏.")
        return ConversationHandler.END

    lot_size = await get_lot_size(ticker)
    if amount % lot_size != 0:
        await update.message.reply_text(
            f"‚ùó {ticker} –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –∫—Ä–∞—Ç–Ω–æ {lot_size} (1 –ª–æ—Ç). "
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ /cancel."
        )
        return BUY_AMOUNT

    # —Ü–µ–Ω–∞
    price_raw = context.user_data.get('buy_price_raw')
    if price_raw is None:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–ø—Ä—ã–≥–Ω—É–ª —à–∞–≥, –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω
        await update.message.reply_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É. "
            "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É (–∑–∞ 1 –∞–∫—Ü–∏—é) –∏–ª–∏ –æ–±—â—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏, –∏ —è —É—Ç–æ—á–Ω—é."
        )
        return BUY_PRICE

    if context.user_data.get('price_is_total'):
        price = round(price_raw / amount, 6)
        await update.message.reply_text(
            f"üí° –ò—Ç–æ–≥: {price_raw:.2f} ‚ÇΩ –∑–∞ {amount} –∞–∫—Ü. ‚Üí {price:.2f} ‚ÇΩ –∑–∞ 1 –∞–∫—Ü–∏—é."
        )
    else:
        price = float(price_raw)
        await update.message.reply_text(f"üí° –¶–µ–Ω–∞ –∑–∞ 1 –∞–∫—Ü–∏—é: {price:.2f} ‚ÇΩ.")

    # –∑–∞–ø–∏—Å—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å
    if ticker in portfolio and isinstance(portfolio[ticker], dict) and \
       portfolio[ticker].get("price") not in (None, 0) and portfolio[ticker].get("amount", 0) > 0:
        existing = portfolio[ticker]
        total_amount = existing["amount"] + amount
        avg_price = (existing["price"] * existing["amount"] + price * amount) / total_amount
        portfolio[ticker] = {"price": round(avg_price, 6), "amount": total_amount}
    else:
        portfolio[ticker] = {"price": price, "amount": amount}

    save_portfolio()
    price_history.pop(ticker, None)
    last_signal.pop(ticker, None)

    history.append({
        "ticker": ticker,
        "action": "buy",
        "amount": amount,
        "price": price,
        "total": round(price * amount, 2)
    })
    save_history()

    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {amount} –∞–∫—Ü–∏–π {ticker} –ø–æ {price:.2f} ‚ÇΩ –∑–∞ 1 –∞–∫—Ü–∏—é.",
        reply_markup=reply_markup
    )
    return ConversationHandler.END


async def refresh_candidates_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await reply_safe(update, "‚è≥ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (Tinkoff ‚Üí MOEX fallback)...")
    n = await update_candidates_list()
    if n > 0:
        await reply_safe(update, f"‚úÖ –ì–æ—Ç–æ–≤–æ: {n} —Ç–∏–∫–µ—Ä–æ–≤.")
    else:
        await reply_safe(update, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")

async def auto_suggest_ideas_daily(budget: float = 3000.0, hour: int = 9):
    class FakeMessage:
        def __init__(self, chat_id):
            self.chat = Chat(id=chat_id, type="private")
        async def reply_text(self, text, **kwargs):
            print(f"[–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ]: {text}")

    class FakeUpdate:
        def __init__(self, chat_id):
            self.message = FakeMessage(chat_id)
            self.effective_chat = self.message.chat
            self.callback_query = None

    class FakeContext:
        def __init__(self):
            self.args = [str(budget)]

    while True:
        now = datetime.now()
        if now.hour == hour:
            print(f"üïò –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ {hour}:00 ‚Äî –±—é–¥–∂–µ—Ç {budget} ‚ÇΩ")
            try:
                fake_update = FakeUpdate(chat_id=CHAT_ID)
                fake_context = FakeContext()
                await suggest_ideas_by_budget(fake_update, fake_context)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞ –∏–¥–µ–π: {e}")
            await asyncio.sleep(3600)  # –∂–¥–∞—Ç—å 1 —á–∞—Å
        else:
            await asyncio.sleep(60)   # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

            
async def debug_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = (context.args[0] if context.args else "AFLT").upper()
    ti = None
    mx = None

    # tinkoff
    try:
        client = TCS_CLIENT
        async with TCS_SEM:
            shares = await client.instruments.shares()
            figi = next((getattr(s, "figi", None) for s in shares.instruments
                         if (getattr(s, "ticker", "") or "").upper() == t), None)
            if figi:
                lp = await client.market_data.get_last_prices(figi=[figi])
                if lp.last_prices:
                    p = lp.last_prices[0].price
                    ti = float(p.units + p.nano * 1e-9)
    except Exception as e:
        logger.warning(f"/debug_price tinkoff {t}: {e}")

    # moex
    try:
        boards = ["TQBR", "TQTF", "TQTD"]
        async with aiohttp.ClientSession() as session:
            for board in boards:
                url = f"https://iss.moex.com/iss/engines/stock/markets/shares/boards/{board}/securities/{t}.json?iss.only=marketdata&iss.meta=off"
                async with session.get(url, timeout=15) as resp:
                    data = await resp.json()
                md = data.get("marketdata", {})
                cols = {c: i for i, c in enumerate(md.get("columns", []))}
                rows = md.get("data") or []
                if not rows:
                    continue
                row = rows[0]
                i = cols.get("LAST")
                if i is not None and row[i]:
                    mx = float(row[i])
                    break
    except Exception as e:
        logger.warning(f"/debug_price moex {t}: {e}")

    await update.message.reply_text(
        f"{t}\nTinkoff: {ti if ti is not None else '‚Äî'}\nMOEX: {mx if mx is not None else '‚Äî'}"
    )
async def buy_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=reply_markup)
    return ConversationHandler.END

async def add_ticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 2:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addticker <–¢–ò–ö–ï–†> <–ù–ê–ó–í–ê–ù–ò–ï>\n–ü—Ä–∏–º–µ—Ä: /addticker AAPL Apple",
            reply_markup=reply_markup
        )
        return

    ticker = args[0].upper()
    name = " ".join(args[1:])

    if ticker in TICKERS:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–¢–∏–∫–µ—Ä {ticker} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
            reply_markup=reply_markup
        )
        return

    TICKERS[ticker] = name
    save_tickers()

    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–¢–∏–∫–µ—Ä {ticker} ‚Äî {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏", callback_data="watchlist")]]
        )
    )
    return

   # --- –§–∏–Ω–∞–ª—å–Ω—ã–π main —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º 3 ---
async def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    load_tickers()
    load_portfolio()
    load_history()

    print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è SMA...")
    start_git_worker()  # –≤–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–≥–æ "–≥–∏—Ç–∞"

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–π Tinkoff AsyncClient + —Å–µ–º–∞—Ñ–æ—Ä ---
    global TCS_CLIENT, TCS_SEM
    TCS_CLIENT = AsyncClient(TINKOFF_TOKEN)
    await TCS_CLIENT.__aenter__()  # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–¥–∏–Ω gRPC-–∫–∞–Ω–∞–ª –Ω–∞ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
    TCS_SEM = asyncio.Semaphore(int(os.getenv("TCS_CONCURRENCY", "4")))

    for ticker in TICKERS:
        try:
            prices = await load_moex_history(ticker, days=250)
            price_history[ticker] = prices
            print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è {ticker}, –¥–Ω–µ–π: {len(prices)}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è {ticker}: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    request = HTTPXRequest(
        connect_timeout=20.0,
        read_timeout=60.0,
        write_timeout=20.0,
        pool_timeout=20.0,
        http_version="1.1",
    )
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).request(request).build()

    # --- –°–ù–ê–ß–ê–õ–ê: ConversationHandler ---
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(buy_from_button, pattern="^buy_")],
        states={
            BUY_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_price)],
            BUY_PRICE_TYPE: [CallbackQueryHandler(price_type_handler, pattern="^price_type_")],
            BUY_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_amount)],
        },
        fallbacks=[
            CommandHandler('cancel', buy_cancel),
            MessageHandler(filters.COMMAND, buy_cancel)
        ],
    )

    print("‚úÖ ConversationHandler –¥–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–º")
    application.add_handler(conv_handler)
    
    print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addticker", add_ticker))
    application.add_handler(CommandHandler("check_api", check_api))
    application.add_handler(CommandHandler("ideas", suggest_ideas_by_budget))
    application.add_handler(CommandHandler("refresh_candidates", refresh_candidates_command))

    application.add_handler(CommandHandler("debug_aflt", debug_aflt))
    application.add_handler(CommandHandler("lot", lot_cmd))
    application.add_handler(CommandHandler("debug_price", debug_price))
    application.add_handler(CommandHandler("trades", trades_cmd))
    
    application.add_handler(CallbackQueryHandler(show_portfolio_plan, pattern="^portfolio_plan$"))  # NEW
    print("‚úÖ CallbackQueryHandler –¥–æ–±–∞–≤–ª–µ–Ω")
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^(?!buy_).*"))



    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
        if isinstance(update, Update) and update.callback_query:
            try:
                await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}")

    application.add_error_handler(error_handler)
    asyncio.create_task(auto_suggest_ideas_daily(budget=3000, hour=9))

    # --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    asyncio.create_task(notify_price_changes(
        application, TICKERS, portfolio, last_signal, CHAT_ID, get_price, calculate_rsi,
        lots_map=None, candidates_file=CANDIDATES_FILE
     ))
    asyncio.create_task(daily_portfolio_plan_notifier(application, CHAT_ID))  # NEW

    # --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —Å–∞–º–æ–ø–∏–Ω–≥ ---
    asyncio.create_task(self_ping())

    try:
        need_bootstrap = (not os.path.exists(CANDIDATES_FILE)) or (os.path.getsize(CANDIDATES_FILE) == 0)
    except Exception:
        need_bootstrap = True

    if need_bootstrap:
        # –º–æ–∂–Ω–æ await, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ —Å—Ç–∞—Ä—Ç–∞ –ø–æ–¥–±–æ—Ä–∞ –∏–¥–µ–π
        try:
            init_n = await update_candidates_list()
            logger.info(f"üî∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {init_n} —Ç–∏–∫–µ—Ä–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —É–ø–∞–ª–∞: {e}")

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(refresh_candidates_periodically(interval_hours=24))

    # –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling: —É–±–∏—Ä–∞–µ–º webhook –∏ —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
    try:
        await application.bot.delete_webhook(drop_pending_updates=True)
        me = await application.bot.get_me()
        logger.info(f"Webhook off. Starting polling for @{me.username} (id={me.id})")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å getMe: {e}")

    # --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await run_forever(application)
    except asyncio.CancelledError:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—â–∏–π Tinkoff-–∫–ª–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if TCS_CLIENT is not None:
            try:
                await TCS_CLIENT.__aexit__(None, None, None)
            finally:
                pass
        save_tickers()
        save_portfolio()
        save_history()




if __name__ == "__main__":
    from keep_alive import keep_alive
    keep_alive()

    import asyncio
    asyncio.run(main())
