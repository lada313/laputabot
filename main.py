import os
import json
import asyncio
import aiohttp
import logging
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, ConversationHandler, MessageHandler, filters
)
import numpy as np
from typing import List, Optional
from keep_alive import keep_alive
from analysis import analyze_stock
from tinkoff.invest import AsyncClient
from self_ping import self_ping

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TINKOFF_TOKEN = os.getenv("TINKOFF_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID", "0"))

TICKERS = {}
portfolio = {}
history = []
price_history = {}
last_signal = {}

LOTS = {
    "SBER": 10,
    "MTSS": 10,
    "PHOR": 1
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BUY_PRICE, BUY_AMOUNT = range(2)
MAX_HISTORY_DAYS = 30
TICKERS_FILE = "tickers.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è nest_asyncio
nest_asyncio.apply()

def save_tickers():
    try:
        with open(TICKERS_FILE, "w", encoding="utf-8") as f:
            json.dump(TICKERS, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–æ–≤: {e}")

def load_tickers():
    global TICKERS
    try:
        with open(TICKERS_FILE, "r", encoding="utf-8") as f:
            TICKERS.update(json.load(f))
            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–∏–∫–µ—Ä—ã:", TICKERS)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        save_tickers()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ä–æ–≤: {e}")

def save_portfolio():
    try:
        if not isinstance(portfolio, dict):
            raise ValueError("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict")

        for ticker, data in portfolio.items():
            if not isinstance(data, dict) or "price" not in data or "amount" not in data:
                raise ValueError(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ {ticker}: {data}")

        with open("portfolio.json", "w", encoding="utf-8") as f:
            json.dump(portfolio, f, ensure_ascii=False, indent=2)
        print("‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", portfolio)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

def load_portfolio():
    global portfolio
    try:
        if not os.path.exists("portfolio.json"):
            print("üìÇ –§–∞–π–ª –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π.")
            save_portfolio()
            return

        with open("portfolio.json", "r", encoding="utf-8") as f:
            data = json.load(f)

        if not isinstance(data, dict):
            raise ValueError("‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–≤—Ä–µ–∂–¥—ë–Ω (–æ–∂–∏–¥–∞–ª—Å—è dict)")

        for ticker, item in data.items():
            if not isinstance(item, dict) or "price" not in item or "amount" not in item:
                raise ValueError(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è {ticker}: {item}")

        portfolio.clear()
        portfolio.update(data)
        print("‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:", portfolio)

    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        portfolio.clear()
        save_portfolio()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        portfolio.clear()
        save_portfolio()

def save_history():
  try:
      with open("history.json", "w", encoding="utf-8") as f:
          json.dump(history, f, ensure_ascii=False, indent=2)
  except Exception as e:
      print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def load_history():
  global history
  try:
      with open("history.json", "r", encoding="utf-8") as f:
          history.extend(json.load(f))
  except FileNotFoundError:
      save_history()
  except Exception as e:
      print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

async def buy_from_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("buy_"):
        ticker = query.data.split("_", 1)[1]
        context.user_data['buy_ticker'] = ticker
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {ticker} (–≤ —Ä—É–±–ª—è—Ö):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
        )
        return BUY_PRICE

async def get_moex_price(ticker: str) -> float:
       url = f"https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities/{ticker}.json"
       async with aiohttp.ClientSession() as session:
           async with session.get(url) as response:
               data = await response.json()
               marketdata = data.get("marketdata")
               if not marketdata:
                   raise ValueError(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker}")
               columns = marketdata["columns"]
               data_rows = marketdata.get("data")
               if not data_rows or not data_rows[0]:
                   raise ValueError(f"–ù–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker}")
               values = data_rows[0]
               price_idx = columns.index("LAST")
               last_price = values[price_idx]
               return float(last_price)

def calculate_rsi(prices: List[float], period: int = 14) -> Optional[float]:
       if len(prices) < period + 1:
           return None
       deltas = np.diff(prices)
       gains = np.where(deltas > 0, deltas, 0)
       losses = np.where(deltas < 0, -deltas, 0)
       avg_gain = np.mean(gains[:period])
       avg_loss = np.mean(losses[:period])
       for i in range(period, len(deltas)):
           gain = gains[i]
           loss = losses[i]
           avg_gain = (avg_gain * (period - 1) + gain) / period
           avg_loss = (avg_loss * (period - 1) + loss) / period
       if avg_loss == 0:
           return 100.0
       rs = avg_gain / avg_loss
       rsi = 100 - (100 / (1 + rs))
       return round(rsi, 2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
  keyboard = [
      [InlineKeyboardButton("–ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")],
      [InlineKeyboardButton("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏", callback_data="watchlist")],
      [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],  # –∏–∑–º–µ–Ω–µ–Ω–æ
      [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä", callback_data="add_ticker")],  # <- –¥–æ–±–∞–≤–ª–µ–Ω–æ
  ]
  reply_markup = InlineKeyboardMarkup(keyboard)
  await update.message.reply_text(
      "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π.\n"
      "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
      reply_markup=reply_markup
  )

async def add_ticker_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/addticker <–¢–ò–ö–ï–†> <–ù–ê–ó–í–ê–ù–ò–ï>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "/addticker AAPL Apple"
        )
        return
    ticker = args[0].upper()
    name = " ".join(args[1:])
    if ticker in TICKERS:
        await update.message.reply_text(f"–¢–∏–∫–µ—Ä {ticker} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        return
    TICKERS[ticker] = name
    save_tickers()
    await update.message.reply_text(f"–¢–∏–∫–µ—Ä {ticker} ‚Äî {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")

async def fetch_accounts():
    async with AsyncClient(token=TINKOFF_TOKEN) as client:
        accounts = await client.users.get_accounts()
        for account in accounts.accounts:
            print(f"ID: {account.id}, Type: {account.type}")
async def check_api(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        async with AsyncClient(TINKOFF_TOKEN) as client:
            accounts = await client.users.get_accounts()
            await update.message.reply_text(f"‚úÖ Tinkoff API –¥–æ—Å—Ç—É–ø–µ–Ω. –°—á–µ—Ç–æ–≤: {len(accounts.accounts)}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Tinkoff API: {str(e)}")


async def fetch_price_and_analysis(ticker, name):
    try:
        current_price = await get_moex_price(ticker)
        price_str = f"{current_price:.2f} ‚ÇΩ"
    except Exception:
        return f"{name} ({ticker}) ‚Äî –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã", None

    try:
        analysis_text = await analyze_stock(ticker)
        if analysis_text:
            analysis_text = f" ‚Äî {analysis_text}"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {ticker}: {e}")
        analysis_text = " ‚Äî –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    return f"{name} ({ticker}) ‚Äî {price_str}{analysis_text}", ticker

async def show_watchlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ü–∏–π —Å —Ü–µ–Ω–∞–º–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º"""
    query = update.callback_query
    await query.answer()

    if not TICKERS:
        await query.edit_message_text("üì≠ –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ü–∏–π –ø—É—Å—Ç.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
        results = await asyncio.gather(
            *(fetch_price_and_analysis(ticker, name) for ticker, name in TICKERS.items()),
            return_exceptions=True  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        )

        msg = "üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏:\n"
        keyboard = []

        for result in results:
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {result}")
                continue

            line, ticker = result
            msg += "\n" + line

            if ticker:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∏–∫–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                keyboard.append([
                    InlineKeyboardButton(f"üí∞ –ö—É–ø–∏—Ç—å {ticker}", callback_data=f"buy_{ticker}"),
                    InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {ticker}", callback_data=f"remove_{ticker}")
                ])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        await query.edit_message_text(
            msg, 
            reply_markup=InlineKeyboardMarkup(keyboard)
        )   
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_watchlist: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()

    if not portfolio:
        await query.edit_message_text("üì≠ –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.")
        return

    try:
        msg = "üìä –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n"
        keyboard = []
        tasks = []

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        for ticker, data in portfolio.items():
            tasks.append(get_portfolio_position_info(ticker, data))

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        position_infos = await asyncio.gather(*tasks, return_exceptions=True)

        for info in position_infos:
            if isinstance(info, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–∏: {info}")
                continue
            msg += info["message"]
            keyboard.append(info["buttons"])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        await query.edit_message_text(
            msg,
            reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_portfolio: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def get_portfolio_position_info(ticker: str, data: dict) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
    try:
        current_price = await get_moex_price(ticker)
        purchase_price = data["price"]
        amount = data["amount"]
        profit_pct = ((current_price - purchase_price) / purchase_price) * 100
        lot_size = LOTS.get(ticker, 1)

        emoji = "üü¢" if current_price > purchase_price else "üîª" if current_price < purchase_price else "‚ûñ"

        message = (
            f"\nüìå {TICKERS.get(ticker, ticker)} ({ticker})\n"
            f"‚îú –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_price:.2f} ‚ÇΩ\n"
            f"‚îú –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} ‚ÇΩ {emoji}\n"
            f"‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} (–ª–æ—Ç {lot_size})\n"
            f"‚îî –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {profit_pct:+.2f}%\n"
        )

        buttons = [
            InlineKeyboardButton(f"üí∏ –ü—Ä–æ–¥–∞—Ç—å {ticker}", callback_data=f"sell_{ticker}"),
            InlineKeyboardButton(f"üîÑ –ö—É–ø–∏—Ç—å –µ—â—ë {ticker}", callback_data=f"buy_{ticker}"),
        ]

        return {"message": message, "buttons": buttons}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {ticker}: {e}")
        return {
            "message": f"\n‚ö†Ô∏è {ticker}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n",
            "buttons": [
                InlineKeyboardButton(f"‚ùå –û—à–∏–±–∫–∞ {ticker}", callback_data="error"),
                InlineKeyboardButton(f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å {ticker}", callback_data=f"refresh_{ticker}")
            ]
        }

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
  query = update.callback_query
  await query.answer()
  data = query.data

  if data == "portfolio":
      await show_portfolio(update, context)

  elif data == "watchlist":
      await show_watchlist(update, context)

  elif data == "reset":
      await reset_portfolio(update, context)

  elif data == "add_ticker":
    await query.edit_message_text(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/addticker <–¢–ò–ö–ï–†> <–ù–ê–ó–í–ê–ù–ò–ï>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "/addticker AAPL Apple"
    )

  elif data == "history":
      if not history:
          await query.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞.")
      else:
          msg = "üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
          for record in reversed(history[-10:]):
              msg += (f"\nüõí {record['action'].upper()} {record['ticker']} ‚Äî "
                      f"{record['amount']} —à—Ç –ø–æ {record['price']} ‚ÇΩ "
                      f"(–Ω–∞ {record['total']} ‚ÇΩ)")
          keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
          reply_markup = InlineKeyboardMarkup(keyboard)
          await query.edit_message_text(msg, reply_markup=reply_markup)

  elif data == "main_menu":
      keyboard = [
          [InlineKeyboardButton("–ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")],
          [InlineKeyboardButton("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏", callback_data="watchlist")],
          [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
          [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä", callback_data="add_ticker")]
      ]
      reply_markup = InlineKeyboardMarkup(keyboard)
      await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

  elif data.startswith("sell_"):
      ticker = data.split("_", 1)[1]
      if ticker in portfolio:
          del portfolio[ticker]
          save_portfolio()
          price_history.pop(ticker, None)
          last_signal.pop(ticker, None)

          history.append({
              "ticker": ticker,
              "action": "sell",
              "amount": "–≤—Å—ë",
              "price": "n/a",
              "total": "n/a"
          })
          save_history()

          await query.edit_message_text(f"‚ùå –ü—Ä–æ–¥–∞–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã –∞–∫—Ü–∏–∏ {ticker} –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")
      else:
          await query.edit_message_text("–ê–∫—Ü–∏–π —Å —Ç–∞–∫–∏–º —Ç–∏–∫–µ—Ä–æ–º –Ω–µ—Ç –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ.")

  elif data.startswith("remove_"):
    ticker = data.split("_", 1)[1]
    if ticker in TICKERS:
        del TICKERS[ticker]
        save_tickers()
        await query.edit_message_text(f"–¢–∏–∫–µ—Ä {ticker} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
  else:
        await query.edit_message_text("–¢–∞–∫–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

  return ConversationHandler.END

async def reset_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
       query = update.callback_query
       await query.answer()
       global portfolio, price_history, last_signal, TICKERS
       portfolio.clear()
       price_history.clear()
       last_signal.clear()
       save_portfolio()
       TICKERS = {
           "MTSS": "–ú–¢–°",
           "PHOR": "–§–æ—Å–ê–≥—Ä–æ",
           "SBER": "–°–±–µ—Ä–±–∞–Ω–∫"
       }
       await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω—ã –∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –±–∞–∑–æ–≤–æ–º—É –Ω–∞–±–æ—Ä—É.")

async def buy_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì© –í—ã–∑–≤–∞–Ω buy_price")
    
    if not update.message or not update.message.text:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º.")
        return BUY_PRICE

    text = update.message.text

    if text == "/cancel":
        return await buy_cancel(update, context)

    try:
        price = float(text.replace(',', '.'))
        context.user_data['buy_price'] = price
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel")
        return BUY_AMOUNT
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return BUY_PRICE


async def buy_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "/cancel":
        return await buy_cancel(update, context)
    try:
        amount = int(text)
        ticker = context.user_data.get('buy_ticker')
        price = context.user_data.get('buy_price')
        lot_size = LOTS.get(ticker, 1)
        if amount % lot_size != 0:
            await update.message.reply_text(
                f"‚ùó {ticker} –ø–æ–∫—É–ø–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–Ω–æ {lot_size} –∞–∫—Ü–∏—è–º (1 –ª–æ—Ç). –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return BUY_AMOUNT

        if ticker in portfolio:
            existing = portfolio[ticker]
            total_amount = existing["amount"] + amount
            avg_price = (existing["price"] * existing["amount"] + price * amount) / total_amount
            portfolio[ticker] = {"price": round(avg_price, 2), "amount": total_amount}
        else:
            portfolio[ticker] = {"price": price, "amount": amount}

        save_portfolio()
        price_history.pop(ticker, None)
        last_signal.pop(ticker, None)
        history.append({
            "ticker": ticker,
            "action": "buy",
            "amount": amount,
            "price": price,
            "total": round(price * amount, 2)
        })
        save_history()

        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {amount} –∞–∫—Ü–∏–π {ticker} –ø–æ —Ü–µ–Ω–µ {price} ‚ÇΩ.",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return BUY_AMOUNT


async def buy_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=reply_markup)
    return ConversationHandler.END

async def notify_price_changes(application):
       while True:
           for ticker, name in TICKERS.items():
               if ticker in portfolio:
                   try:
                       current_price = await get_moex_price(ticker)
                       purchase_price = portfolio[ticker]["price"]
                       change = (current_price - purchase_price) / purchase_price

                       if ticker not in price_history:
                           price_history[ticker] = []
                       price_history[ticker].append(current_price)
                       if len(price_history[ticker]) > MAX_HISTORY_DAYS:
                           price_history[ticker].pop(0)

                       rsi_note = ""
                       rsi = calculate_rsi(price_history[ticker])
                       if rsi is not None:
                           if rsi < 30:
                               rsi_note = f"\nüìâ RSI = {rsi}. –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ‚Äî —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª–∏–∑–∫–∞ –∫ –¥–Ω—É."
                           elif rsi > 70:
                               rsi_note = f"\nüìà RSI = {rsi}. –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç–∫–∞—Ç."

                       signal = None
                       msg = None
                       if change >= 0.10:
                           recommendation = await analyze_stock(ticker)
                           print(f"Recommendation for {ticker}: {recommendation}")
                           if recommendation:
                               msg = recommendation
                           else:
                               msg = None
                               if msg and CHAT_ID != 0:
                                   try:
                                       await application.bot.send_message(chat_id=CHAT_ID, text=msg)
                                       last_signal[ticker] = msg  # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ
                                   except Exception as e:
                                       print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                           if price_history[ticker]:
                               min_price = min(price_history[ticker])
                               if current_price <= min_price:
                                   msg += "\nüìâ –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –º–∏–Ω–∏–º—É–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥!"
                       elif change <= -0.05:
                           signal = "stop_loss"
                           msg = f"‚ö†Ô∏è –ê–∫—Ü–∏—è {ticker}: —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ 5%. –ü—Ä–æ–≤–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏.{rsi_note}"

                       if signal and last_signal.get(ticker) != signal:
                           await application.bot.send_message(chat_id=CHAT_ID, text=msg)
                           last_signal[ticker] = signal
                       elif signal is None:
                           last_signal[ticker] = None

                   except Exception as e:
                       print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ {ticker}: {e}")

           await asyncio.sleep(10 * 60)

async def add_ticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 2:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addticker <–¢–ò–ö–ï–†> <–ù–ê–ó–í–ê–ù–ò–ï>\n–ü—Ä–∏–º–µ—Ä: /addticker AAPL Apple",
            reply_markup=reply_markup
        )
        return

    ticker = args[0].upper()
    name = " ".join(args[1:])

    if ticker in TICKERS:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–¢–∏–∫–µ—Ä {ticker} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
            reply_markup=reply_markup
        )
        return

    TICKERS[ticker] = name
    save_tickers()

    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–∏–∫–µ—Ä {ticker} ‚Äî {name} –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
        reply_markup=reply_markup
    )

   # --- –§–∏–Ω–∞–ª—å–Ω—ã–π main —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º 3 ---
async def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    load_tickers()
    load_portfolio()
    load_history()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # --- –°–ù–ê–ß–ê–õ–ê: ConversationHandler ---
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(buy_from_button, pattern="^buy_")],
        states={
            BUY_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_price)],
            BUY_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_amount)],
        },
        fallbacks=[
            CommandHandler('cancel', buy_cancel),
            MessageHandler(filters.COMMAND, buy_cancel)
        ],
        # ---per_message=True
    )

    print("‚úÖ ConversationHandler –¥–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–º")
    application.add_handler(conv_handler)
    
    print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addticker", add_ticker_command))
    application.add_handler(CommandHandler("check_api", check_api))
    
    print("‚úÖ CallbackQueryHandler –¥–æ–±–∞–≤–ª–µ–Ω")
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^(?!buy_).*"))


    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
        if isinstance(update, Update) and update.callback_query:
            try:
                await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}")

    application.add_error_handler(error_handler)

    # --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    asyncio.create_task(notify_price_changes(application))

    # --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —Å–∞–º–æ–ø–∏–Ω–≥ ---
    asyncio.create_task(self_ping())

    # --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await application.run_polling()
    except asyncio.CancelledError:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
        save_tickers()
        save_portfolio()
        save_history()


if __name__ == "__main__":
    from keep_alive import keep_alive
    keep_alive()

    import asyncio
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
